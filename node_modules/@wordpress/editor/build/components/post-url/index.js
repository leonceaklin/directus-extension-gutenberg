"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostURL;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _url = require("@wordpress/url");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _coreData = require("@wordpress/core-data");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function PostURL(_ref) {
  let {
    onClose
  } = _ref;
  const {
    isEditable,
    postSlug,
    viewPostLabel,
    postLink,
    permalinkPrefix,
    permalinkSuffix
  } = (0, _data.useSelect)(select => {
    var _post$_links$wpActio, _post$_links;

    const post = select(_store.store).getCurrentPost();
    const postTypeSlug = select(_store.store).getCurrentPostType();
    const postType = select(_coreData.store).getPostType(postTypeSlug);
    const permalinkParts = select(_store.store).getPermalinkParts();
    const hasPublishAction = (_post$_links$wpActio = post === null || post === void 0 ? void 0 : (_post$_links = post._links) === null || _post$_links === void 0 ? void 0 : _post$_links['wp:action-publish']) !== null && _post$_links$wpActio !== void 0 ? _post$_links$wpActio : false;
    return {
      isEditable: select(_store.store).isPermalinkEditable() && hasPublishAction,
      postSlug: (0, _url.safeDecodeURIComponent)(select(_store.store).getEditedPostSlug()),
      viewPostLabel: postType === null || postType === void 0 ? void 0 : postType.labels.view_item,
      postLink: post.link,
      permalinkPrefix: permalinkParts === null || permalinkParts === void 0 ? void 0 : permalinkParts.prefix,
      permalinkSuffix: permalinkParts === null || permalinkParts === void 0 ? void 0 : permalinkParts.suffix
    };
  }, []);
  const {
    editPost
  } = (0, _data.useDispatch)(_store.store);
  const [forceEmptyField, setForceEmptyField] = (0, _element.useState)(false);
  return (0, _element.createElement)("div", {
    className: "editor-post-url"
  }, (0, _element.createElement)(_blockEditor.__experimentalInspectorPopoverHeader, {
    title: (0, _i18n.__)('URL'),
    onClose: onClose
  }), isEditable && (0, _element.createElement)(_components.TextControl, {
    label: (0, _i18n.__)('Permalink'),
    value: forceEmptyField ? '' : postSlug,
    autoComplete: "off",
    spellCheck: "false",
    help: (0, _element.createElement)(_element.Fragment, null, (0, _i18n.__)('The last part of the URL.'), ' ', (0, _element.createElement)(_components.ExternalLink, {
      href: (0, _i18n.__)('https://wordpress.org/support/article/settings-sidebar/#permalink')
    }, (0, _i18n.__)('Learn more.'))),
    onChange: newValue => {
      editPost({
        slug: newValue
      }); // When we delete the field the permalink gets
      // reverted to the original value.
      // The forceEmptyField logic allows the user to have
      // the field temporarily empty while typing.

      if (!newValue) {
        if (!forceEmptyField) {
          setForceEmptyField(true);
        }

        return;
      }

      if (forceEmptyField) {
        setForceEmptyField(false);
      }
    },
    onBlur: event => {
      editPost({
        slug: (0, _url.cleanForSlug)(event.target.value)
      });

      if (forceEmptyField) {
        setForceEmptyField(false);
      }
    }
  }), isEditable && (0, _element.createElement)("h3", {
    className: "editor-post-url__link-label"
  }, viewPostLabel !== null && viewPostLabel !== void 0 ? viewPostLabel : (0, _i18n.__)('View post')), (0, _element.createElement)("p", null, (0, _element.createElement)(_components.ExternalLink, {
    className: "editor-post-url__link",
    href: postLink,
    target: "_blank"
  }, isEditable ? (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("span", {
    className: "editor-post-url__link-prefix"
  }, permalinkPrefix), (0, _element.createElement)("span", {
    className: "editor-post-url__link-slug"
  }, postSlug), (0, _element.createElement)("span", {
    className: "editor-post-url__link-suffix"
  }, permalinkSuffix)) : postLink)));
}
//# sourceMappingURL=index.js.map