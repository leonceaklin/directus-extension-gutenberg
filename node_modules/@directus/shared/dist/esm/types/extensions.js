import { API_EXTENSION_TYPES, APP_EXTENSION_TYPES, EXTENSION_PKG_KEY, HYBRID_EXTENSION_TYPES, } from '../constants';
import { z } from 'zod';
const SplitEntrypoint = z.object({
    app: z.string(),
    api: z.string(),
});
export const ExtensionOptionsBundleEntry = z.union([
    z.object({
        type: z.union([z.enum(APP_EXTENSION_TYPES), z.enum(API_EXTENSION_TYPES)]),
        name: z.string(),
        source: z.string(),
    }),
    z.object({
        type: z.enum(HYBRID_EXTENSION_TYPES),
        name: z.string(),
        source: SplitEntrypoint,
    }),
]);
const ExtensionOptionsBase = z.object({
    host: z.string(),
    hidden: z.boolean().optional(),
});
const ExtensionOptionsAppOrApi = z.object({
    type: z.union([z.enum(APP_EXTENSION_TYPES), z.enum(API_EXTENSION_TYPES)]),
    path: z.string(),
    source: z.string(),
});
const ExtensionOptionsHybrid = z.object({
    type: z.enum(HYBRID_EXTENSION_TYPES),
    path: SplitEntrypoint,
    source: SplitEntrypoint,
});
const ExtensionOptionsBundle = z.object({
    type: z.literal('bundle'),
    path: SplitEntrypoint,
    entries: z.array(ExtensionOptionsBundleEntry),
});
const ExtensionOptions = ExtensionOptionsBase.and(z.union([ExtensionOptionsAppOrApi, ExtensionOptionsHybrid, ExtensionOptionsBundle]));
export const ExtensionOptionsBundleEntries = z.array(ExtensionOptionsBundleEntry);
export const ExtensionManifest = z.object({
    name: z.string(),
    version: z.string(),
    dependencies: z.record(z.string()).optional(),
    [EXTENSION_PKG_KEY]: ExtensionOptions,
});
