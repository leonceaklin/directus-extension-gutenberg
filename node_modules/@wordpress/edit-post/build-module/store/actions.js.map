{"version":3,"sources":["@wordpress/edit-post/src/store/actions.js"],"names":["__","apiFetch","store","interfaceStore","preferencesStore","speak","noticesStore","coreStore","blockEditorStore","editorStore","getMetaBoxContainer","editPostStore","openGeneralSidebar","name","registry","dispatch","enableComplementaryArea","closeGeneralSidebar","disableComplementaryArea","openModal","type","closeModal","openPublishSidebar","closePublishSidebar","togglePublishSidebar","toggleEditorPanelEnabled","panelName","inactivePanels","select","get","isPanelInactive","includes","updatedInactivePanels","filter","invactivePanelName","set","toggleEditorPanelOpened","openPanels","isPanelOpen","updatedOpenPanels","openPanelName","removeEditorPanel","toggleFeature","feature","toggle","switchEditorMode","mode","clearSelectedBlock","message","togglePinnedPluginItem","pluginName","isPinned","isItemPinned","updatePreferredStyleVariations","blockName","blockStyle","existingVariations","updatedVariations","showBlockTypes","blockNames","existingBlockNames","newBlockNames","Array","isArray","hideBlockTypes","mergedBlockNames","Set","setAvailableMetaBoxesPerLocation","metaBoxesPerLocation","requestMetaBoxUpdates","window","tinyMCE","triggerSave","post","getCurrentPost","additionalData","comment_status","ping_status","sticky","author","Boolean","baseFormData","FormData","document","querySelector","activeMetaBoxLocations","getActiveMetaBoxLocations","formDataToMerge","map","location","formData","reduce","memo","currentFormData","key","value","append","forEach","url","_wpMetaBoxUrl","method","body","parse","metaBoxUpdatesSuccess","metaBoxUpdatesFailure","__experimentalSetPreviewDeviceType","deviceType","setIsInserterOpened","setIsListViewOpened","isOpen","setIsEditingTemplate","__unstableSwitchToTemplateMode","newTemplate","isWelcomeGuideActive","isFeatureActive","createSuccessNotice","__unstableCreateTemplate","template","savedTemplate","saveEntityRecord","editEntityRecord","id","slug","metaBoxesInitialized","initializeMetaBoxes","isEditorReady","__unstableIsEditorReady","postType","getCurrentPostType","postboxes","page","add_postbox_toggles","wasSavingPost","isSavingPost","wasAutosavingPost","isAutosavingPost","subscribe","shouldTriggerMetaboxesSave","hasMetaBoxes"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,EAAT,QAAmB,iBAAnB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,KAAK,IAAIC,cAAlB,QAAwC,sBAAxC;AACA,SAASD,KAAK,IAAIE,gBAAlB,QAA0C,wBAA1C;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASH,KAAK,IAAII,YAAlB,QAAsC,oBAAtC;AACA,SAASJ,KAAK,IAAIK,SAAlB,QAAmC,sBAAnC;AACA,SAASL,KAAK,IAAIM,gBAAlB,QAA0C,yBAA1C;AACA,SAASN,KAAK,IAAIO,WAAlB,QAAqC,mBAArC;AAEA;AACA;AACA;;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASR,KAAK,IAAIS,aAAlB,QAAuC,GAAvC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAC5BC,IAAF,IACA;AAAA,MAAE;AAAEC,IAAAA;AAAF,GAAF;AAAA,SACCA,QAAQ,CACNC,QADF,CACYZ,cADZ,EAEEa,uBAFF,CAE2BL,aAAa,CAACE,IAFzC,EAE+CA,IAF/C,CADD;AAAA,CAFM;AAOP;AACA;AACA;;AACA,OAAO,MAAMI,mBAAmB,GAC/B,MACA;AAAA,MAAE;AAAEH,IAAAA;AAAF,GAAF;AAAA,SACCA,QAAQ,CACNC,QADF,CACYZ,cADZ,EAEEe,wBAFF,CAE4BP,aAAa,CAACE,IAF1C,CADD;AAAA,CAFM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,SAAT,CAAoBN,IAApB,EAA2B;AACjC,SAAO;AACNO,IAAAA,IAAI,EAAE,YADA;AAENP,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,UAAT,GAAsB;AAC5B,SAAO;AACND,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,kBAAT,GAA8B;AACpC,SAAO;AACNF,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,mBAAT,GAA+B;AACrC,SAAO;AACNH,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,oBAAT,GAAgC;AACtC,SAAO;AACNJ,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,wBAAwB,GAClCC,SAAF,IACA,SAAoB;AAAA;;AAAA,MAAlB;AAAEZ,IAAAA;AAAF,GAAkB;AACnB,QAAMa,cAAc,2BACnBb,QAAQ,CACNc,MADF,CACUxB,gBADV,EAEEyB,GAFF,CAEO,gBAFP,EAEyB,gBAFzB,CADmB,uEAG4B,EAHhD;AAKA,QAAMC,eAAe,GAAG,CAAC,EAAEH,cAAF,aAAEA,cAAF,eAAEA,cAAc,CAAEI,QAAhB,CAA0BL,SAA1B,CAAF,CAAzB,CANmB,CAQnB;AACA;;AACA,MAAIM,qBAAJ;;AACA,MAAKF,eAAL,EAAuB;AACtBE,IAAAA,qBAAqB,GAAGL,cAAc,CAACM,MAAf,CACrBC,kBAAF,IAA0BA,kBAAkB,KAAKR,SAD1B,CAAxB;AAGA,GAJD,MAIO;AACNM,IAAAA,qBAAqB,GAAG,CAAE,GAAGL,cAAL,EAAqBD,SAArB,CAAxB;AACA;;AAEDZ,EAAAA,QAAQ,CACNC,QADF,CACYX,gBADZ,EAEE+B,GAFF,CAEO,gBAFP,EAEyB,gBAFzB,EAE2CH,qBAF3C;AAGA,CAxBK;AA0BP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,uBAAuB,GACjCV,SAAF,IACA,SAAoB;AAAA;;AAAA,MAAlB;AAAEZ,IAAAA;AAAF,GAAkB;AACnB,QAAMuB,UAAU,4BACfvB,QAAQ,CACNc,MADF,CACUxB,gBADV,EAEEyB,GAFF,CAEO,gBAFP,EAEyB,YAFzB,CADe,yEAG4B,EAH5C;AAKA,QAAMS,WAAW,GAAG,CAAC,EAAED,UAAF,aAAEA,UAAF,eAAEA,UAAU,CAAEN,QAAZ,CAAsBL,SAAtB,CAAF,CAArB,CANmB,CAQnB;AACA;;AACA,MAAIa,iBAAJ;;AACA,MAAKD,WAAL,EAAmB;AAClBC,IAAAA,iBAAiB,GAAGF,UAAU,CAACJ,MAAX,CACjBO,aAAF,IAAqBA,aAAa,KAAKd,SADpB,CAApB;AAGA,GAJD,MAIO;AACNa,IAAAA,iBAAiB,GAAG,CAAE,GAAGF,UAAL,EAAiBX,SAAjB,CAApB;AACA;;AAEDZ,EAAAA,QAAQ,CACNC,QADF,CACYX,gBADZ,EAEE+B,GAFF,CAEO,gBAFP,EAEyB,YAFzB,EAEuCI,iBAFvC;AAGA,CAxBK;AA0BP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,iBAAT,CAA4Bf,SAA5B,EAAwC;AAC9C,SAAO;AACNN,IAAAA,IAAI,EAAE,cADA;AAENM,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMgB,aAAa,GACvBC,OAAF,IACA;AAAA,MAAE;AAAE7B,IAAAA;AAAF,GAAF;AAAA,SACCA,QAAQ,CACNC,QADF,CACYX,gBADZ,EAEEwC,MAFF,CAEU,gBAFV,EAE4BD,OAF5B,CADD;AAAA,CAFM;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,gBAAgB,GAC1BC,IAAF,IACA,SAAoB;AAAA,MAAlB;AAAEhC,IAAAA;AAAF,GAAkB;AACnBA,EAAAA,QAAQ,CACNC,QADF,CACYX,gBADZ,EAEE+B,GAFF,CAEO,gBAFP,EAEyB,YAFzB,EAEuCW,IAFvC,EADmB,CAKnB;;AACA,MAAKA,IAAI,KAAK,QAAd,EAAyB;AACxBhC,IAAAA,QAAQ,CAACC,QAAT,CAAmBP,gBAAnB,EAAsCuC,kBAAtC;AACA;;AAED,QAAMC,OAAO,GACZF,IAAI,KAAK,QAAT,GACG9C,EAAE,CAAE,wBAAF,CADL,GAEGA,EAAE,CAAE,sBAAF,CAHN;AAIAK,EAAAA,KAAK,CAAE2C,OAAF,EAAW,WAAX,CAAL;AACA,CAjBK;AAmBP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,sBAAsB,GAChCC,UAAF,IACA,SAAoB;AAAA,MAAlB;AAAEpC,IAAAA;AAAF,GAAkB;AACnB,QAAMqC,QAAQ,GAAGrC,QAAQ,CACvBc,MADe,CACPzB,cADO,EAEfiD,YAFe,CAED,gBAFC,EAEiBF,UAFjB,CAAjB;AAIApC,EAAAA,QAAQ,CACNC,QADF,CACYZ,cADZ,EAEGgD,QAAQ,GAAG,WAAH,GAAiB,SAF5B,EAGE,gBAHF,EAIED,UAJF;AAMA,CAbK;AAeP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,8BAA8B,GAC1C,CAAEC,SAAF,EAAaC,UAAb,KACA,SAAoB;AAAA;;AAAA,MAAlB;AAAEzC,IAAAA;AAAF,GAAkB;;AACnB,MAAK,CAAEwC,SAAP,EAAmB;AAClB;AACA;;AAED,QAAME,kBAAkB,4BACvB1C,QAAQ,CACNc,MADF,CACUxB,gBADV,EAEEyB,GAFF,CAEO,gBAFP,EAEyB,0BAFzB,CADuB,yEAGkC,EAH1D,CALmB,CAUnB;;AACA,MAAK,CAAE0B,UAAP,EAAoB;AACnB,UAAME,iBAAiB,GAAG,EACzB,GAAGD;AADsB,KAA1B;AAIA,WAAOC,iBAAiB,CAAEH,SAAF,CAAxB;AAEAxC,IAAAA,QAAQ,CACNC,QADF,CACYX,gBADZ,EAEE+B,GAFF,CAGE,gBAHF,EAIE,0BAJF,EAKEsB,iBALF;AAOA,GAdD,MAcO;AACN;AACA3C,IAAAA,QAAQ,CACNC,QADF,CACYX,gBADZ,EAEE+B,GAFF,CAEO,gBAFP,EAEyB,0BAFzB,EAEqD,EACnD,GAAGqB,kBADgD;AAEnD,OAAEF,SAAF,GAAeC;AAFoC,KAFrD;AAMA;AACD,CApCK;AAsCP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,cAAc,GACxBC,UAAF,IACA,SAAoB;AAAA;;AAAA,MAAlB;AAAE7C,IAAAA;AAAF,GAAkB;AACnB,QAAM8C,kBAAkB,4BACvB9C,QAAQ,CACNc,MADF,CACUxB,gBADV,EAEEyB,GAFF,CAEO,gBAFP,EAEyB,kBAFzB,CADuB,yEAG0B,EAHlD;AAKA,QAAMgC,aAAa,GAAGD,kBAAkB,CAAC3B,MAAnB,CACnBb,IAAF,IACC,CAAE,CACD0C,KAAK,CAACC,OAAN,CAAeJ,UAAf,IAA8BA,UAA9B,GAA2C,CAAEA,UAAF,CAD1C,EAEC5B,QAFD,CAEWX,IAFX,CAFkB,CAAtB;AAOAN,EAAAA,QAAQ,CACNC,QADF,CACYX,gBADZ,EAEE+B,GAFF,CAEO,gBAFP,EAEyB,kBAFzB,EAE6C0B,aAF7C;AAGA,CAlBK;AAoBP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,cAAc,GACxBL,UAAF,IACA,UAAoB;AAAA;;AAAA,MAAlB;AAAE7C,IAAAA;AAAF,GAAkB;AACnB,QAAM8C,kBAAkB,4BACvB9C,QAAQ,CACNc,MADF,CACUxB,gBADV,EAEEyB,GAFF,CAEO,gBAFP,EAEyB,kBAFzB,CADuB,yEAG0B,EAHlD;AAKA,QAAMoC,gBAAgB,GAAG,IAAIC,GAAJ,CAAS,CACjC,GAAGN,kBAD8B,EAEjC,IAAKE,KAAK,CAACC,OAAN,CAAeJ,UAAf,IAA8BA,UAA9B,GAA2C,CAAEA,UAAF,CAAhD,CAFiC,CAAT,CAAzB;AAKA7C,EAAAA,QAAQ,CACNC,QADF,CACYX,gBADZ,EAEE+B,GAFF,CAEO,gBAFP,EAEyB,kBAFzB,EAE6C,CAC3C,GAAG8B,gBADwC,CAF7C;AAKA,CAlBK;AAoBP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,gCAAT,CAA2CC,oBAA3C,EAAkE;AACxE,SAAO;AACNhD,IAAAA,IAAI,EAAE,8BADA;AAENgD,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GACjC,MACA,gBAA4C;AAAA,MAApC;AAAEvD,IAAAA,QAAF;AAAYc,IAAAA,MAAZ;AAAoBb,IAAAA;AAApB,GAAoC;AAC3CA,EAAAA,QAAQ,CAAE;AACTK,IAAAA,IAAI,EAAE;AADG,GAAF,CAAR,CAD2C,CAK3C;;AACA,MAAKkD,MAAM,CAACC,OAAZ,EAAsB;AACrBD,IAAAA,MAAM,CAACC,OAAP,CAAeC,WAAf;AACA,GAR0C,CAU3C;AACA;;;AACA,QAAMC,IAAI,GAAG3D,QAAQ,CAACc,MAAT,CAAiBnB,WAAjB,EAA+BiE,cAA/B,EAAb;AACA,QAAMC,cAAc,GAAG,CACtBF,IAAI,CAACG,cAAL,GACG,CAAE,gBAAF,EAAoBH,IAAI,CAACG,cAAzB,CADH,GAEG,KAHmB,EAItBH,IAAI,CAACI,WAAL,GAAmB,CAAE,aAAF,EAAiBJ,IAAI,CAACI,WAAtB,CAAnB,GAAyD,KAJnC,EAKtBJ,IAAI,CAACK,MAAL,GAAc,CAAE,QAAF,EAAYL,IAAI,CAACK,MAAjB,CAAd,GAA0C,KALpB,EAMtBL,IAAI,CAACM,MAAL,GAAc,CAAE,aAAF,EAAiBN,IAAI,CAACM,MAAtB,CAAd,GAA+C,KANzB,EAOrB9C,MAPqB,CAOb+C,OAPa,CAAvB,CAb2C,CAsB3C;;AACA,QAAMC,YAAY,GAAG,IAAIX,MAAM,CAACY,QAAX,CACpBC,QAAQ,CAACC,aAAT,CAAwB,oBAAxB,CADoB,CAArB;AAGA,QAAMC,sBAAsB,GAAGzD,MAAM,CAAC0D,yBAAP,EAA/B;AACA,QAAMC,eAAe,GAAG,CACvBN,YADuB,EAEvB,GAAGI,sBAAsB,CAACG,GAAvB,CACAC,QAAF,IACC,IAAInB,MAAM,CAACY,QAAX,CAAqBxE,mBAAmB,CAAE+E,QAAF,CAAxC,CAFC,CAFoB,CAAxB,CA3B2C,CAmC3C;;AACA,QAAMC,QAAQ,GAAGH,eAAe,CAACI,MAAhB,CAAwB,CAAEC,IAAF,EAAQC,eAAR,KAA6B;AACrE,SAAM,MAAM,CAAEC,GAAF,EAAOC,KAAP,CAAZ,IAA8BF,eAA9B,EAAgD;AAC/CD,MAAAA,IAAI,CAACI,MAAL,CAAaF,GAAb,EAAkBC,KAAlB;AACA;;AACD,WAAOH,IAAP;AACA,GALgB,EAKd,IAAItB,MAAM,CAACY,QAAX,EALc,CAAjB;AAMAP,EAAAA,cAAc,CAACsB,OAAf,CAAwB;AAAA,QAAE,CAAEH,GAAF,EAAOC,KAAP,CAAF;AAAA,WACvBL,QAAQ,CAACM,MAAT,CAAiBF,GAAjB,EAAsBC,KAAtB,CADuB;AAAA,GAAxB;;AAIA,MAAI;AACH;AACA,UAAM9F,QAAQ,CAAE;AACfiG,MAAAA,GAAG,EAAE5B,MAAM,CAAC6B,aADG;AAEfC,MAAAA,MAAM,EAAE,MAFO;AAGfC,MAAAA,IAAI,EAAEX,QAHS;AAIfY,MAAAA,KAAK,EAAE;AAJQ,KAAF,CAAd;AAMAvF,IAAAA,QAAQ,CAACwF,qBAAT;AACA,GATD,CASE,MAAM;AACPxF,IAAAA,QAAQ,CAACyF,qBAAT;AACA;AACD,CA5DK;AA8DP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASD,qBAAT,GAAiC;AACvC,SAAO;AACNnF,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoF,qBAAT,GAAiC;AACvC,SAAO;AACNpF,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqF,kCAAT,CAA6CC,UAA7C,EAA0D;AAChE,SAAO;AACNtF,IAAAA,IAAI,EAAE,yBADA;AAENsF,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA8BZ,KAA9B,EAAsC;AAC5C,SAAO;AACN3E,IAAAA,IAAI,EAAE,wBADA;AAEN2E,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,mBAAT,CAA8BC,MAA9B,EAAuC;AAC7C,SAAO;AACNzF,IAAAA,IAAI,EAAE,yBADA;AAENyF,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA+Bf,KAA/B,EAAuC;AAC7C,SAAO;AACN3E,IAAAA,IAAI,EAAE,yBADA;AAEN2E,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMgB,8BAA8B,GAC1C;AAAA,MAAEC,WAAF,uEAAgB,KAAhB;AAAA,SACA,UAAsC;AAAA,QAApC;AAAElG,MAAAA,QAAF;AAAYc,MAAAA,MAAZ;AAAoBb,MAAAA;AAApB,KAAoC;AACrCA,IAAAA,QAAQ,CAAE+F,oBAAoB,CAAE,IAAF,CAAtB,CAAR;AACA,UAAMG,oBAAoB,GAAGrF,MAAM,CAACsF,eAAP,CAC5B,sBAD4B,CAA7B;;AAGA,QAAK,CAAED,oBAAP,EAA8B;AAC7B,YAAMjE,OAAO,GAAGgE,WAAW,GACxBhH,EAAE,CAAE,uDAAF,CADsB,GAExBA,EAAE,CACF,uFADE,CAFL;AAKAc,MAAAA,QAAQ,CAACC,QAAT,CAAmBT,YAAnB,EAAkC6G,mBAAlC,CAAuDnE,OAAvD,EAAgE;AAC/D5B,QAAAA,IAAI,EAAE;AADyD,OAAhE;AAGA;AACD,GAhBD;AAAA,CADM;AAmBP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMgG,wBAAwB,GAClCC,QAAF,IACA,gBAA0B;AAAA,MAAlB;AAAEvG,IAAAA;AAAF,GAAkB;AACzB,QAAMwG,aAAa,GAAG,MAAMxG,QAAQ,CAClCC,QAD0B,CAChBR,SADgB,EAE1BgH,gBAF0B,CAER,UAFQ,EAEI,aAFJ,EAEmBF,QAFnB,CAA5B;AAGA,QAAM5C,IAAI,GAAG3D,QAAQ,CAACc,MAAT,CAAiBnB,WAAjB,EAA+BiE,cAA/B,EAAb;AACA5D,EAAAA,QAAQ,CACNC,QADF,CACYR,SADZ,EAEEiH,gBAFF,CAEoB,UAFpB,EAEgC/C,IAAI,CAACrD,IAFrC,EAE2CqD,IAAI,CAACgD,EAFhD,EAEoD;AAClDJ,IAAAA,QAAQ,EAAEC,aAAa,CAACI;AAD0B,GAFpD;AAKA,CAZK;AAcP,IAAIC,oBAAoB,GAAG,KAA3B;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAC/B,MACA,UAAsC;AAAA,MAApC;AAAE9G,IAAAA,QAAF;AAAYc,IAAAA,MAAZ;AAAoBb,IAAAA;AAApB,GAAoC;;AACrC,QAAM8G,aAAa,GAAG/G,QAAQ,CAC5Bc,MADoB,CACZnB,WADY,EAEpBqH,uBAFoB,EAAtB;;AAIA,MAAK,CAAED,aAAP,EAAuB;AACtB;AACA,GAPoC,CAQrC;;;AACA,MAAKF,oBAAL,EAA4B;AAC3B;AACA;;AACD,QAAMI,QAAQ,GAAGjH,QAAQ,CAACc,MAAT,CAAiBnB,WAAjB,EAA+BuH,kBAA/B,EAAjB;;AACA,MAAK1D,MAAM,CAAC2D,SAAP,CAAiBC,IAAjB,KAA0BH,QAA/B,EAA0C;AACzCzD,IAAAA,MAAM,CAAC2D,SAAP,CAAiBE,mBAAjB,CAAsCJ,QAAtC;AACA;;AAEDJ,EAAAA,oBAAoB,GAAG,IAAvB;AAEA,MAAIS,aAAa,GAAGtH,QAAQ,CAACc,MAAT,CAAiBnB,WAAjB,EAA+B4H,YAA/B,EAApB;AACA,MAAIC,iBAAiB,GAAGxH,QAAQ,CAC9Bc,MADsB,CACdnB,WADc,EAEtB8H,gBAFsB,EAAxB,CApBqC,CAwBrC;;AACAzH,EAAAA,QAAQ,CAAC0H,SAAT,CAAoB,YAAY;AAC/B,UAAMH,YAAY,GAAGvH,QAAQ,CAACc,MAAT,CAAiBnB,WAAjB,EAA+B4H,YAA/B,EAArB;AACA,UAAME,gBAAgB,GAAGzH,QAAQ,CAC/Bc,MADuB,CACfnB,WADe,EAEvB8H,gBAFuB,EAAzB,CAF+B,CAM/B;;AACA,UAAME,0BAA0B,GAC/BL,aAAa,IACb,CAAEE,iBADF,IAEA,CAAED,YAFF,IAGAzG,MAAM,CAAC8G,YAAP,EAJD,CAP+B,CAa/B;;AACAN,IAAAA,aAAa,GAAGC,YAAhB;AACAC,IAAAA,iBAAiB,GAAGC,gBAApB;;AAEA,QAAKE,0BAAL,EAAkC;AACjC,YAAM1H,QAAQ,CAACsD,qBAAT,EAAN;AACA;AACD,GApBD;AAsBAtD,EAAAA,QAAQ,CAAE;AACTK,IAAAA,IAAI,EAAE;AADG,GAAF,CAAR;AAGA,CApDK","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport apiFetch from '@wordpress/api-fetch';\nimport { store as interfaceStore } from '@wordpress/interface';\nimport { store as preferencesStore } from '@wordpress/preferences';\nimport { speak } from '@wordpress/a11y';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { store as editorStore } from '@wordpress/editor';\n\n/**\n * Internal dependencies\n */\nimport { getMetaBoxContainer } from '../utils/meta-boxes';\nimport { store as editPostStore } from '.';\n\n/**\n * Returns an action object used in signalling that the user opened an editor sidebar.\n *\n * @param {?string} name Sidebar name to be opened.\n */\nexport const openGeneralSidebar =\n\t( name ) =>\n\t( { registry } ) =>\n\t\tregistry\n\t\t\t.dispatch( interfaceStore )\n\t\t\t.enableComplementaryArea( editPostStore.name, name );\n\n/**\n * Returns an action object signalling that the user closed the sidebar.\n */\nexport const closeGeneralSidebar =\n\t() =>\n\t( { registry } ) =>\n\t\tregistry\n\t\t\t.dispatch( interfaceStore )\n\t\t\t.disableComplementaryArea( editPostStore.name );\n\n/**\n * Returns an action object used in signalling that the user opened a modal.\n *\n * @param {string} name A string that uniquely identifies the modal.\n *\n * @return {Object} Action object.\n */\nexport function openModal( name ) {\n\treturn {\n\t\ttype: 'OPEN_MODAL',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object signalling that the user closed a modal.\n *\n * @return {Object} Action object.\n */\nexport function closeModal() {\n\treturn {\n\t\ttype: 'CLOSE_MODAL',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user opened the publish\n * sidebar.\n *\n * @return {Object} Action object\n */\nexport function openPublishSidebar() {\n\treturn {\n\t\ttype: 'OPEN_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user closed the\n * publish sidebar.\n *\n * @return {Object} Action object.\n */\nexport function closePublishSidebar() {\n\treturn {\n\t\ttype: 'CLOSE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user toggles the publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function togglePublishSidebar() {\n\treturn {\n\t\ttype: 'TOGGLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to enable or disable a panel in the editor.\n *\n * @param {string} panelName A string that identifies the panel to enable or disable.\n *\n * @return {Object} Action object.\n */\nexport const toggleEditorPanelEnabled =\n\t( panelName ) =>\n\t( { registry } ) => {\n\t\tconst inactivePanels =\n\t\t\tregistry\n\t\t\t\t.select( preferencesStore )\n\t\t\t\t.get( 'core/edit-post', 'inactivePanels' ) ?? [];\n\n\t\tconst isPanelInactive = !! inactivePanels?.includes( panelName );\n\n\t\t// If the panel is inactive, remove it to enable it, else add it to\n\t\t// make it inactive.\n\t\tlet updatedInactivePanels;\n\t\tif ( isPanelInactive ) {\n\t\t\tupdatedInactivePanels = inactivePanels.filter(\n\t\t\t\t( invactivePanelName ) => invactivePanelName !== panelName\n\t\t\t);\n\t\t} else {\n\t\t\tupdatedInactivePanels = [ ...inactivePanels, panelName ];\n\t\t}\n\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core/edit-post', 'inactivePanels', updatedInactivePanels );\n\t};\n\n/**\n * Opens a closed panel and closes an open panel.\n *\n * @param {string} panelName A string that identifies the panel to open or close.\n */\nexport const toggleEditorPanelOpened =\n\t( panelName ) =>\n\t( { registry } ) => {\n\t\tconst openPanels =\n\t\t\tregistry\n\t\t\t\t.select( preferencesStore )\n\t\t\t\t.get( 'core/edit-post', 'openPanels' ) ?? [];\n\n\t\tconst isPanelOpen = !! openPanels?.includes( panelName );\n\n\t\t// If the panel is open, remove it to close it, else add it to\n\t\t// make it open.\n\t\tlet updatedOpenPanels;\n\t\tif ( isPanelOpen ) {\n\t\t\tupdatedOpenPanels = openPanels.filter(\n\t\t\t\t( openPanelName ) => openPanelName !== panelName\n\t\t\t);\n\t\t} else {\n\t\t\tupdatedOpenPanels = [ ...openPanels, panelName ];\n\t\t}\n\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core/edit-post', 'openPanels', updatedOpenPanels );\n\t};\n\n/**\n * Returns an action object used to remove a panel from the editor.\n *\n * @param {string} panelName A string that identifies the panel to remove.\n *\n * @return {Object} Action object.\n */\nexport function removeEditorPanel( panelName ) {\n\treturn {\n\t\ttype: 'REMOVE_PANEL',\n\t\tpanelName,\n\t};\n}\n\n/**\n * Triggers an action used to toggle a feature flag.\n *\n * @param {string} feature Feature name.\n */\nexport const toggleFeature =\n\t( feature ) =>\n\t( { registry } ) =>\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.toggle( 'core/edit-post', feature );\n\n/**\n * Triggers an action used to switch editor mode.\n *\n * @param {string} mode The editor mode.\n */\nexport const switchEditorMode =\n\t( mode ) =>\n\t( { registry } ) => {\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core/edit-post', 'editorMode', mode );\n\n\t\t// Unselect blocks when we switch to the code editor.\n\t\tif ( mode !== 'visual' ) {\n\t\t\tregistry.dispatch( blockEditorStore ).clearSelectedBlock();\n\t\t}\n\n\t\tconst message =\n\t\t\tmode === 'visual'\n\t\t\t\t? __( 'Visual editor selected' )\n\t\t\t\t: __( 'Code editor selected' );\n\t\tspeak( message, 'assertive' );\n\t};\n\n/**\n * Triggers an action object used to toggle a plugin name flag.\n *\n * @param {string} pluginName Plugin name.\n */\nexport const togglePinnedPluginItem =\n\t( pluginName ) =>\n\t( { registry } ) => {\n\t\tconst isPinned = registry\n\t\t\t.select( interfaceStore )\n\t\t\t.isItemPinned( 'core/edit-post', pluginName );\n\n\t\tregistry\n\t\t\t.dispatch( interfaceStore )\n\t\t\t[ isPinned ? 'unpinItem' : 'pinItem' ](\n\t\t\t\t'core/edit-post',\n\t\t\t\tpluginName\n\t\t\t);\n\t};\n\n/**\n * Returns an action object used in signaling that a style should be auto-applied when a block is created.\n *\n * @param {string}  blockName  Name of the block.\n * @param {?string} blockStyle Name of the style that should be auto applied. If undefined, the \"auto apply\" setting of the block is removed.\n */\nexport const updatePreferredStyleVariations =\n\t( blockName, blockStyle ) =>\n\t( { registry } ) => {\n\t\tif ( ! blockName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst existingVariations =\n\t\t\tregistry\n\t\t\t\t.select( preferencesStore )\n\t\t\t\t.get( 'core/edit-post', 'preferredStyleVariations' ) ?? {};\n\n\t\t// When the blockStyle is omitted, remove the block's preferred variation.\n\t\tif ( ! blockStyle ) {\n\t\t\tconst updatedVariations = {\n\t\t\t\t...existingVariations,\n\t\t\t};\n\n\t\t\tdelete updatedVariations[ blockName ];\n\n\t\t\tregistry\n\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t.set(\n\t\t\t\t\t'core/edit-post',\n\t\t\t\t\t'preferredStyleVariations',\n\t\t\t\t\tupdatedVariations\n\t\t\t\t);\n\t\t} else {\n\t\t\t// Else add the variation.\n\t\t\tregistry\n\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t.set( 'core/edit-post', 'preferredStyleVariations', {\n\t\t\t\t\t...existingVariations,\n\t\t\t\t\t[ blockName ]: blockStyle,\n\t\t\t\t} );\n\t\t}\n\t};\n\n/**\n * Update the provided block types to be visible.\n *\n * @param {string[]} blockNames Names of block types to show.\n */\nexport const showBlockTypes =\n\t( blockNames ) =>\n\t( { registry } ) => {\n\t\tconst existingBlockNames =\n\t\t\tregistry\n\t\t\t\t.select( preferencesStore )\n\t\t\t\t.get( 'core/edit-post', 'hiddenBlockTypes' ) ?? [];\n\n\t\tconst newBlockNames = existingBlockNames.filter(\n\t\t\t( type ) =>\n\t\t\t\t! (\n\t\t\t\t\tArray.isArray( blockNames ) ? blockNames : [ blockNames ]\n\t\t\t\t ).includes( type )\n\t\t);\n\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core/edit-post', 'hiddenBlockTypes', newBlockNames );\n\t};\n\n/**\n * Update the provided block types to be hidden.\n *\n * @param {string[]} blockNames Names of block types to hide.\n */\nexport const hideBlockTypes =\n\t( blockNames ) =>\n\t( { registry } ) => {\n\t\tconst existingBlockNames =\n\t\t\tregistry\n\t\t\t\t.select( preferencesStore )\n\t\t\t\t.get( 'core/edit-post', 'hiddenBlockTypes' ) ?? [];\n\n\t\tconst mergedBlockNames = new Set( [\n\t\t\t...existingBlockNames,\n\t\t\t...( Array.isArray( blockNames ) ? blockNames : [ blockNames ] ),\n\t\t] );\n\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core/edit-post', 'hiddenBlockTypes', [\n\t\t\t\t...mergedBlockNames,\n\t\t\t] );\n\t};\n\n/**\n * Stores info about which Meta boxes are available in which location.\n *\n * @param {Object} metaBoxesPerLocation Meta boxes per location.\n */\nexport function setAvailableMetaBoxesPerLocation( metaBoxesPerLocation ) {\n\treturn {\n\t\ttype: 'SET_META_BOXES_PER_LOCATIONS',\n\t\tmetaBoxesPerLocation,\n\t};\n}\n\n/**\n * Update a metabox.\n */\nexport const requestMetaBoxUpdates =\n\t() =>\n\tasync ( { registry, select, dispatch } ) => {\n\t\tdispatch( {\n\t\t\ttype: 'REQUEST_META_BOX_UPDATES',\n\t\t} );\n\n\t\t// Saves the wp_editor fields.\n\t\tif ( window.tinyMCE ) {\n\t\t\twindow.tinyMCE.triggerSave();\n\t\t}\n\n\t\t// Additional data needed for backward compatibility.\n\t\t// If we do not provide this data, the post will be overridden with the default values.\n\t\tconst post = registry.select( editorStore ).getCurrentPost();\n\t\tconst additionalData = [\n\t\t\tpost.comment_status\n\t\t\t\t? [ 'comment_status', post.comment_status ]\n\t\t\t\t: false,\n\t\t\tpost.ping_status ? [ 'ping_status', post.ping_status ] : false,\n\t\t\tpost.sticky ? [ 'sticky', post.sticky ] : false,\n\t\t\tpost.author ? [ 'post_author', post.author ] : false,\n\t\t].filter( Boolean );\n\n\t\t// We gather all the metaboxes locations data and the base form data.\n\t\tconst baseFormData = new window.FormData(\n\t\t\tdocument.querySelector( '.metabox-base-form' )\n\t\t);\n\t\tconst activeMetaBoxLocations = select.getActiveMetaBoxLocations();\n\t\tconst formDataToMerge = [\n\t\t\tbaseFormData,\n\t\t\t...activeMetaBoxLocations.map(\n\t\t\t\t( location ) =>\n\t\t\t\t\tnew window.FormData( getMetaBoxContainer( location ) )\n\t\t\t),\n\t\t];\n\n\t\t// Merge all form data objects into a single one.\n\t\tconst formData = formDataToMerge.reduce( ( memo, currentFormData ) => {\n\t\t\tfor ( const [ key, value ] of currentFormData ) {\n\t\t\t\tmemo.append( key, value );\n\t\t\t}\n\t\t\treturn memo;\n\t\t}, new window.FormData() );\n\t\tadditionalData.forEach( ( [ key, value ] ) =>\n\t\t\tformData.append( key, value )\n\t\t);\n\n\t\ttry {\n\t\t\t// Save the metaboxes.\n\t\t\tawait apiFetch( {\n\t\t\t\turl: window._wpMetaBoxUrl,\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: formData,\n\t\t\t\tparse: false,\n\t\t\t} );\n\t\t\tdispatch.metaBoxUpdatesSuccess();\n\t\t} catch {\n\t\t\tdispatch.metaBoxUpdatesFailure();\n\t\t}\n\t};\n\n/**\n * Returns an action object used to signal a successful meta box update.\n *\n * @return {Object} Action object.\n */\nexport function metaBoxUpdatesSuccess() {\n\treturn {\n\t\ttype: 'META_BOX_UPDATES_SUCCESS',\n\t};\n}\n\n/**\n * Returns an action object used to signal a failed meta box update.\n *\n * @return {Object} Action object.\n */\nexport function metaBoxUpdatesFailure() {\n\treturn {\n\t\ttype: 'META_BOX_UPDATES_FAILURE',\n\t};\n}\n\n/**\n * Returns an action object used to toggle the width of the editing canvas.\n *\n * @param {string} deviceType\n *\n * @return {Object} Action object.\n */\nexport function __experimentalSetPreviewDeviceType( deviceType ) {\n\treturn {\n\t\ttype: 'SET_PREVIEW_DEVICE_TYPE',\n\t\tdeviceType,\n\t};\n}\n\n/**\n * Returns an action object used to open/close the inserter.\n *\n * @param {boolean|Object} value                Whether the inserter should be\n *                                              opened (true) or closed (false).\n *                                              To specify an insertion point,\n *                                              use an object.\n * @param {string}         value.rootClientId   The root client ID to insert at.\n * @param {number}         value.insertionIndex The index to insert at.\n *\n * @return {Object} Action object.\n */\nexport function setIsInserterOpened( value ) {\n\treturn {\n\t\ttype: 'SET_IS_INSERTER_OPENED',\n\t\tvalue,\n\t};\n}\n\n/**\n * Returns an action object used to open/close the list view.\n *\n * @param {boolean} isOpen A boolean representing whether the list view should be opened or closed.\n * @return {Object} Action object.\n */\nexport function setIsListViewOpened( isOpen ) {\n\treturn {\n\t\ttype: 'SET_IS_LIST_VIEW_OPENED',\n\t\tisOpen,\n\t};\n}\n\n/**\n * Returns an action object used to switch to template editing.\n *\n * @param {boolean} value Is editing template.\n * @return {Object} Action object.\n */\nexport function setIsEditingTemplate( value ) {\n\treturn {\n\t\ttype: 'SET_IS_EDITING_TEMPLATE',\n\t\tvalue,\n\t};\n}\n\n/**\n * Switches to the template mode.\n *\n * @param {boolean} newTemplate Is new template.\n */\nexport const __unstableSwitchToTemplateMode =\n\t( newTemplate = false ) =>\n\t( { registry, select, dispatch } ) => {\n\t\tdispatch( setIsEditingTemplate( true ) );\n\t\tconst isWelcomeGuideActive = select.isFeatureActive(\n\t\t\t'welcomeGuideTemplate'\n\t\t);\n\t\tif ( ! isWelcomeGuideActive ) {\n\t\t\tconst message = newTemplate\n\t\t\t\t? __( \"Custom template created. You're in template mode now.\" )\n\t\t\t\t: __(\n\t\t\t\t\t\t'Editing template. Changes made here affect all posts and pages that use the template.'\n\t\t\t\t  );\n\t\t\tregistry.dispatch( noticesStore ).createSuccessNotice( message, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t}\n\t};\n\n/**\n * Create a block based template.\n *\n * @param {Object?} template Template to create and assign.\n */\nexport const __unstableCreateTemplate =\n\t( template ) =>\n\tasync ( { registry } ) => {\n\t\tconst savedTemplate = await registry\n\t\t\t.dispatch( coreStore )\n\t\t\t.saveEntityRecord( 'postType', 'wp_template', template );\n\t\tconst post = registry.select( editorStore ).getCurrentPost();\n\t\tregistry\n\t\t\t.dispatch( coreStore )\n\t\t\t.editEntityRecord( 'postType', post.type, post.id, {\n\t\t\t\ttemplate: savedTemplate.slug,\n\t\t\t} );\n\t};\n\nlet metaBoxesInitialized = false;\n\n/**\n * Initializes WordPress `postboxes` script and the logic for saving meta boxes.\n */\nexport const initializeMetaBoxes =\n\t() =>\n\t( { registry, select, dispatch } ) => {\n\t\tconst isEditorReady = registry\n\t\t\t.select( editorStore )\n\t\t\t.__unstableIsEditorReady();\n\n\t\tif ( ! isEditorReady ) {\n\t\t\treturn;\n\t\t}\n\t\t// Only initialize once.\n\t\tif ( metaBoxesInitialized ) {\n\t\t\treturn;\n\t\t}\n\t\tconst postType = registry.select( editorStore ).getCurrentPostType();\n\t\tif ( window.postboxes.page !== postType ) {\n\t\t\twindow.postboxes.add_postbox_toggles( postType );\n\t\t}\n\n\t\tmetaBoxesInitialized = true;\n\n\t\tlet wasSavingPost = registry.select( editorStore ).isSavingPost();\n\t\tlet wasAutosavingPost = registry\n\t\t\t.select( editorStore )\n\t\t\t.isAutosavingPost();\n\n\t\t// Save metaboxes when performing a full save on the post.\n\t\tregistry.subscribe( async () => {\n\t\t\tconst isSavingPost = registry.select( editorStore ).isSavingPost();\n\t\t\tconst isAutosavingPost = registry\n\t\t\t\t.select( editorStore )\n\t\t\t\t.isAutosavingPost();\n\n\t\t\t// Save metaboxes on save completion, except for autosaves.\n\t\t\tconst shouldTriggerMetaboxesSave =\n\t\t\t\twasSavingPost &&\n\t\t\t\t! wasAutosavingPost &&\n\t\t\t\t! isSavingPost &&\n\t\t\t\tselect.hasMetaBoxes();\n\n\t\t\t// Save current state for next inspection.\n\t\t\twasSavingPost = isSavingPost;\n\t\t\twasAutosavingPost = isAutosavingPost;\n\n\t\t\tif ( shouldTriggerMetaboxesSave ) {\n\t\t\t\tawait dispatch.requestMetaBoxUpdates();\n\t\t\t}\n\t\t} );\n\n\t\tdispatch( {\n\t\t\ttype: 'META_BOXES_INITIALIZED',\n\t\t} );\n\t};\n"]}