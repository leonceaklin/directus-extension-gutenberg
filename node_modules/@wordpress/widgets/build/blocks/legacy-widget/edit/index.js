"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Edit;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _widgetTypeSelector = _interopRequireDefault(require("./widget-type-selector"));

var _inspectorCard = _interopRequireDefault(require("./inspector-card"));

var _form = _interopRequireDefault(require("./form"));

var _preview = _interopRequireDefault(require("./preview"));

var _noPreview = _interopRequireDefault(require("./no-preview"));

var _convertToBlocksButton = _interopRequireDefault(require("./convert-to-blocks-button"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function Edit(props) {
  const {
    id,
    idBase
  } = props.attributes;
  const {
    isWide = false
  } = props;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)({
      'is-wide-widget': isWide
    })
  });
  return (0, _element.createElement)("div", blockProps, !id && !idBase ? (0, _element.createElement)(Empty, props) : (0, _element.createElement)(NotEmpty, props));
}

function Empty(_ref) {
  let {
    attributes: {
      id,
      idBase
    },
    setAttributes
  } = _ref;
  return (0, _element.createElement)(_components.Placeholder, {
    icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
      icon: _icons.brush
    }),
    label: (0, _i18n.__)('Legacy Widget')
  }, (0, _element.createElement)(_components.Flex, null, (0, _element.createElement)(_components.FlexBlock, null, (0, _element.createElement)(_widgetTypeSelector.default, {
    selectedId: id !== null && id !== void 0 ? id : idBase,
    onSelect: _ref2 => {
      let {
        selectedId,
        isMulti
      } = _ref2;

      if (!selectedId) {
        setAttributes({
          id: null,
          idBase: null,
          instance: null
        });
      } else if (isMulti) {
        setAttributes({
          id: null,
          idBase: selectedId,
          instance: {}
        });
      } else {
        setAttributes({
          id: selectedId,
          idBase: null,
          instance: null
        });
      }
    }
  }))));
}

function NotEmpty(_ref3) {
  let {
    attributes: {
      id,
      idBase,
      instance
    },
    setAttributes,
    clientId,
    isSelected,
    isWide = false
  } = _ref3;
  const [hasPreview, setHasPreview] = (0, _element.useState)(null);
  const widgetTypeId = id !== null && id !== void 0 ? id : idBase;
  const {
    record: widgetType,
    hasResolved: hasResolvedWidgetType
  } = (0, _coreData.useEntityRecord)('root', 'widgetType', widgetTypeId);
  const isNavigationMode = (0, _data.useSelect)(select => select(_blockEditor.store).isNavigationMode(), []);
  const setInstance = (0, _element.useCallback)(nextInstance => {
    setAttributes({
      instance: nextInstance
    });
  }, []);

  if (!widgetType && hasResolvedWidgetType) {
    return (0, _element.createElement)(_components.Placeholder, {
      icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
        icon: _icons.brush
      }),
      label: (0, _i18n.__)('Legacy Widget')
    }, (0, _i18n.__)('Widget is missing.'));
  }

  if (!hasResolvedWidgetType) {
    return (0, _element.createElement)(_components.Placeholder, null, (0, _element.createElement)(_components.Spinner, null));
  }

  const mode = idBase && (isNavigationMode || !isSelected) ? 'preview' : 'edit';
  return (0, _element.createElement)(_element.Fragment, null, idBase === 'text' && (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "other"
  }, (0, _element.createElement)(_convertToBlocksButton.default, {
    clientId: clientId,
    rawInstance: instance.raw
  })), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_inspectorCard.default, {
    name: widgetType.name,
    description: widgetType.description
  })), (0, _element.createElement)(_form.default, {
    title: widgetType.name,
    isVisible: mode === 'edit',
    id: id,
    idBase: idBase,
    instance: instance,
    isWide: isWide,
    onChangeInstance: setInstance,
    onChangeHasPreview: setHasPreview
  }), idBase && (0, _element.createElement)(_element.Fragment, null, hasPreview === null && mode === 'preview' && (0, _element.createElement)(_components.Placeholder, null, (0, _element.createElement)(_components.Spinner, null)), hasPreview === true && (0, _element.createElement)(_preview.default, {
    idBase: idBase,
    instance: instance,
    isVisible: mode === 'preview'
  }), hasPreview === false && mode === 'preview' && (0, _element.createElement)(_noPreview.default, {
    name: widgetType.name
  })));
}
//# sourceMappingURL=index.js.map