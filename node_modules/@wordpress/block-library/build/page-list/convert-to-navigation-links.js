"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertToNavigationLinks = void 0;

var _blocks = require("@wordpress/blocks");

/**
 * WordPress dependencies
 */
const convertToNavigationLinks = pages => {
  if (!pages) {
    return;
  }

  const linkMap = {};
  const navigationLinks = [];
  pages.forEach(_ref => {
    var _linkMap$id$innerBloc, _linkMap$id;

    let {
      id,
      title,
      link: url,
      type,
      parent
    } = _ref;
    // See if a placeholder exists. This is created if children appear before parents in list.
    const innerBlocks = (_linkMap$id$innerBloc = (_linkMap$id = linkMap[id]) === null || _linkMap$id === void 0 ? void 0 : _linkMap$id.innerBlocks) !== null && _linkMap$id$innerBloc !== void 0 ? _linkMap$id$innerBloc : [];
    linkMap[id] = (0, _blocks.createBlock)('core/navigation-link', {
      id,
      label: title.rendered,
      url,
      type,
      kind: 'post-type'
    }, innerBlocks);

    if (!parent) {
      navigationLinks.push(linkMap[id]);
    } else {
      if (!linkMap[parent]) {
        // Use a placeholder if the child appears before parent in list.
        linkMap[parent] = {
          innerBlocks: []
        };
      }

      const parentLinkInnerBlocks = linkMap[parent].innerBlocks;
      parentLinkInnerBlocks.push(linkMap[id]);
    }
  }); // Transform all links with innerBlocks into Submenus. This can't be done
  // sooner because page objects have no information on their children.

  const transformSubmenus = listOfLinks => {
    listOfLinks.forEach((block, index, listOfLinksArray) => {
      const {
        attributes,
        innerBlocks
      } = block;

      if (innerBlocks.length !== 0) {
        transformSubmenus(innerBlocks);
        const transformedBlock = (0, _blocks.createBlock)('core/navigation-submenu', attributes, innerBlocks);
        listOfLinksArray[index] = transformedBlock;
      }
    });
  };

  transformSubmenus(navigationLinks);
  return navigationLinks;
};

exports.convertToNavigationLinks = convertToNavigationLinks;
//# sourceMappingURL=convert-to-navigation-links.js.map