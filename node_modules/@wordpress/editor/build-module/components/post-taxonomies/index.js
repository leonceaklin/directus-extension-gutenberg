import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { Fragment } from '@wordpress/element';
import { withSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { store as coreStore } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import HierarchicalTermSelector from './hierarchical-term-selector';
import FlatTermSelector from './flat-term-selector';
import { store as editorStore } from '../../store';

const identity = x => x;

export function PostTaxonomies(_ref) {
  let {
    postType,
    taxonomies,
    taxonomyWrapper = identity
  } = _ref;
  const availableTaxonomies = (taxonomies !== null && taxonomies !== void 0 ? taxonomies : []).filter(taxonomy => taxonomy.types.includes(postType));
  const visibleTaxonomies = availableTaxonomies.filter( // In some circumstances .visibility can end up as undefined so optional chaining operator required.
  // https://github.com/WordPress/gutenberg/issues/40326
  taxonomy => {
    var _taxonomy$visibility;

    return (_taxonomy$visibility = taxonomy.visibility) === null || _taxonomy$visibility === void 0 ? void 0 : _taxonomy$visibility.show_ui;
  });
  return visibleTaxonomies.map(taxonomy => {
    const TaxonomyComponent = taxonomy.hierarchical ? HierarchicalTermSelector : FlatTermSelector;
    return createElement(Fragment, {
      key: `taxonomy-${taxonomy.slug}`
    }, taxonomyWrapper(createElement(TaxonomyComponent, {
      slug: taxonomy.slug
    }), taxonomy));
  });
}
export default compose([withSelect(select => {
  return {
    postType: select(editorStore).getCurrentPostType(),
    taxonomies: select(coreStore).getTaxonomies({
      per_page: -1
    })
  };
})])(PostTaxonomies);
//# sourceMappingURL=index.js.map