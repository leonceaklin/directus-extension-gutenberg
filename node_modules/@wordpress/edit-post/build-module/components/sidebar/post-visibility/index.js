import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __, sprintf } from '@wordpress/i18n';
import { PanelRow, Dropdown, Button } from '@wordpress/components';
import { PostVisibility as PostVisibilityForm, PostVisibilityLabel, PostVisibilityCheck, usePostVisibilityLabel } from '@wordpress/editor';
import { useMemo, useState } from '@wordpress/element';
export function PostVisibility() {
  // Use internal state instead of a ref to make sure that the component
  // re-renders when the popover's anchor updates.
  const [popoverAnchor, setPopoverAnchor] = useState(null); // Memoize popoverProps to avoid returning a new object every time.

  const popoverProps = useMemo(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor
  }), [popoverAnchor]);
  return createElement(PostVisibilityCheck, {
    render: _ref => {
      let {
        canEdit
      } = _ref;
      return createElement(PanelRow, {
        ref: setPopoverAnchor,
        className: "edit-post-post-visibility"
      }, createElement("span", null, __('Visibility')), !canEdit && createElement("span", null, createElement(PostVisibilityLabel, null)), canEdit && createElement(Dropdown, {
        position: "bottom left",
        contentClassName: "edit-post-post-visibility__dialog",
        popoverProps: popoverProps,
        focusOnMount: true,
        renderToggle: _ref2 => {
          let {
            isOpen,
            onToggle
          } = _ref2;
          return createElement(PostVisibilityToggle, {
            isOpen: isOpen,
            onClick: onToggle
          });
        },
        renderContent: _ref3 => {
          let {
            onClose
          } = _ref3;
          return createElement(PostVisibilityForm, {
            onClose: onClose
          });
        }
      }));
    }
  });
}

function PostVisibilityToggle(_ref4) {
  let {
    isOpen,
    onClick
  } = _ref4;
  const label = usePostVisibilityLabel();
  return createElement(Button, {
    className: "edit-post-post-visibility__toggle",
    variant: "tertiary",
    "aria-expanded": isOpen // translators: %s: Current post visibility.
    ,
    "aria-label": sprintf(__('Select visibility: %s'), label),
    onClick: onClick
  }, label);
}

export default PostVisibility;
//# sourceMappingURL=index.js.map