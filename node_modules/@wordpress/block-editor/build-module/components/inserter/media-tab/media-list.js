import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __unstableComposite as Composite, __unstableUseCompositeState as useCompositeState, __unstableCompositeItem as CompositeItem, Tooltip } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useMemo, useCallback } from '@wordpress/element';
import { cloneBlock } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import InserterDraggableBlocks from '../../inserter-draggable-blocks';
import { getBlockAndPreviewFromMedia } from './utils';

function MediaPreview(_ref) {
  var _media$title;

  let {
    media,
    onClick,
    composite,
    mediaType
  } = _ref;
  const [block, preview] = useMemo(() => getBlockAndPreviewFromMedia(media, mediaType), [media, mediaType]);
  const title = ((_media$title = media.title) === null || _media$title === void 0 ? void 0 : _media$title.rendered) || media.title;
  const baseCssClass = 'block-editor-inserter__media-list';
  return createElement(InserterDraggableBlocks, {
    isEnabled: true,
    blocks: [block]
  }, _ref2 => {
    let {
      draggable,
      onDragStart,
      onDragEnd
    } = _ref2;
    return createElement("div", {
      className: `${baseCssClass}__list-item`,
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd
    }, createElement(Tooltip, {
      text: title
    }, createElement(CompositeItem, _extends({
      role: "option",
      as: "div"
    }, composite, {
      className: `${baseCssClass}__item`,
      onClick: () => {
        onClick(block);
      },
      "aria-label": title
    }), createElement("div", {
      className: `${baseCssClass}__item-preview`
    }, preview))));
  });
}

function MediaList(_ref3) {
  let {
    mediaList,
    mediaType,
    onClick,
    label = __('Media List')
  } = _ref3;
  const composite = useCompositeState();
  const onPreviewClick = useCallback(block => {
    onClick(cloneBlock(block));
  }, [onClick]);
  return createElement(Composite, _extends({}, composite, {
    role: "listbox",
    className: "block-editor-inserter__media-list",
    "aria-label": label
  }), mediaList.map(media => createElement(MediaPreview, {
    key: media.id,
    media: media,
    mediaType: mediaType,
    onClick: onPreviewClick,
    composite: composite
  })));
}

export default MediaList;
//# sourceMappingURL=media-list.js.map