"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostVisibility;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _utils = require("./utils");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function PostVisibility(_ref) {
  let {
    onClose
  } = _ref;
  const instanceId = (0, _compose.useInstanceId)(PostVisibility);
  const {
    status,
    visibility,
    password
  } = (0, _data.useSelect)(select => ({
    status: select(_store.store).getEditedPostAttribute('status'),
    visibility: select(_store.store).getEditedPostVisibility(),
    password: select(_store.store).getEditedPostAttribute('password')
  }));
  const {
    editPost,
    savePost
  } = (0, _data.useDispatch)(_store.store);
  const [hasPassword, setHasPassword] = (0, _element.useState)(!!password);
  const [showPrivateConfirmDialog, setShowPrivateConfirmDialog] = (0, _element.useState)(false);

  const setPublic = () => {
    editPost({
      status: visibility === 'private' ? 'draft' : status,
      password: ''
    });
    setHasPassword(false);
  };

  const setPrivate = () => {
    setShowPrivateConfirmDialog(true);
  };

  const confirmPrivate = () => {
    editPost({
      status: 'private',
      password: ''
    });
    setHasPassword(false);
    setShowPrivateConfirmDialog(false);
    savePost();
  };

  const handleDialogCancel = () => {
    setShowPrivateConfirmDialog(false);
  };

  const setPasswordProtected = () => {
    editPost({
      status: visibility === 'private' ? 'draft' : status,
      password: password || ''
    });
    setHasPassword(true);
  };

  const updatePassword = event => {
    editPost({
      password: event.target.value
    });
  };

  return (0, _element.createElement)("div", {
    className: "editor-post-visibility"
  }, (0, _element.createElement)(_blockEditor.__experimentalInspectorPopoverHeader, {
    title: (0, _i18n.__)('Visibility'),
    help: (0, _i18n.__)('Control how this post is viewed.'),
    onClose: onClose
  }), (0, _element.createElement)("fieldset", {
    className: "editor-post-visibility__fieldset"
  }, (0, _element.createElement)(_components.VisuallyHidden, {
    as: "legend"
  }, (0, _i18n.__)('Visibility')), (0, _element.createElement)(PostVisibilityChoice, {
    instanceId: instanceId,
    value: "public",
    label: _utils.visibilityOptions.public.label,
    info: _utils.visibilityOptions.public.info,
    checked: visibility === 'public' && !hasPassword,
    onChange: setPublic
  }), (0, _element.createElement)(PostVisibilityChoice, {
    instanceId: instanceId,
    value: "private",
    label: _utils.visibilityOptions.private.label,
    info: _utils.visibilityOptions.private.info,
    checked: visibility === 'private',
    onChange: setPrivate
  }), (0, _element.createElement)(PostVisibilityChoice, {
    instanceId: instanceId,
    value: "password",
    label: _utils.visibilityOptions.password.label,
    info: _utils.visibilityOptions.password.info,
    checked: hasPassword,
    onChange: setPasswordProtected
  }), hasPassword && (0, _element.createElement)("div", {
    className: "editor-post-visibility__password"
  }, (0, _element.createElement)(_components.VisuallyHidden, {
    as: "label",
    htmlFor: `editor-post-visibility__password-input-${instanceId}`
  }, (0, _i18n.__)('Create password')), (0, _element.createElement)("input", {
    className: "editor-post-visibility__password-input",
    id: `editor-post-visibility__password-input-${instanceId}`,
    type: "text",
    onChange: updatePassword,
    value: password,
    placeholder: (0, _i18n.__)('Use a secure password')
  }))), (0, _element.createElement)(_components.__experimentalConfirmDialog, {
    isOpen: showPrivateConfirmDialog,
    onConfirm: confirmPrivate,
    onCancel: handleDialogCancel
  }, (0, _i18n.__)('Would you like to privately publish this post now?')));
}

function PostVisibilityChoice(_ref2) {
  let {
    instanceId,
    value,
    label,
    info,
    ...props
  } = _ref2;
  return (0, _element.createElement)("div", {
    className: "editor-post-visibility__choice"
  }, (0, _element.createElement)("input", (0, _extends2.default)({
    type: "radio",
    name: `editor-post-visibility__setting-${instanceId}`,
    value: value,
    id: `editor-post-${value}-${instanceId}`,
    "aria-describedby": `editor-post-${value}-${instanceId}-description`,
    className: "editor-post-visibility__radio"
  }, props)), (0, _element.createElement)("label", {
    htmlFor: `editor-post-${value}-${instanceId}`,
    className: "editor-post-visibility__label"
  }, label), (0, _element.createElement)("p", {
    id: `editor-post-${value}-${instanceId}-description`,
    className: "editor-post-visibility__info"
  }, info));
}
//# sourceMappingURL=index.js.map