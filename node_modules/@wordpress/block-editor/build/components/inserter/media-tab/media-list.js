"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _inserterDraggableBlocks = _interopRequireDefault(require("../../inserter-draggable-blocks"));

var _utils = require("./utils");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function MediaPreview(_ref) {
  var _media$title;

  let {
    media,
    onClick,
    composite,
    mediaType
  } = _ref;
  const [block, preview] = (0, _element.useMemo)(() => (0, _utils.getBlockAndPreviewFromMedia)(media, mediaType), [media, mediaType]);
  const title = ((_media$title = media.title) === null || _media$title === void 0 ? void 0 : _media$title.rendered) || media.title;
  const baseCssClass = 'block-editor-inserter__media-list';
  return (0, _element.createElement)(_inserterDraggableBlocks.default, {
    isEnabled: true,
    blocks: [block]
  }, _ref2 => {
    let {
      draggable,
      onDragStart,
      onDragEnd
    } = _ref2;
    return (0, _element.createElement)("div", {
      className: `${baseCssClass}__list-item`,
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd
    }, (0, _element.createElement)(_components.Tooltip, {
      text: title
    }, (0, _element.createElement)(_components.__unstableCompositeItem, (0, _extends2.default)({
      role: "option",
      as: "div"
    }, composite, {
      className: `${baseCssClass}__item`,
      onClick: () => {
        onClick(block);
      },
      "aria-label": title
    }), (0, _element.createElement)("div", {
      className: `${baseCssClass}__item-preview`
    }, preview))));
  });
}

function MediaList(_ref3) {
  let {
    mediaList,
    mediaType,
    onClick,
    label = (0, _i18n.__)('Media List')
  } = _ref3;
  const composite = (0, _components.__unstableUseCompositeState)();
  const onPreviewClick = (0, _element.useCallback)(block => {
    onClick((0, _blocks.cloneBlock)(block));
  }, [onClick]);
  return (0, _element.createElement)(_components.__unstableComposite, (0, _extends2.default)({}, composite, {
    role: "listbox",
    className: "block-editor-inserter__media-list",
    "aria-label": label
  }), mediaList.map(media => (0, _element.createElement)(MediaPreview, {
    key: media.id,
    media: media,
    mediaType: mediaType,
    onClick: onPreviewClick,
    composite: composite
  })));
}

var _default = MediaList;
exports.default = _default;
//# sourceMappingURL=media-list.js.map