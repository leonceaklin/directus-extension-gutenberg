"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _url = require("@wordpress/url");

var _icons = require("@wordpress/icons");

var _editor = require("@wordpress/editor");

var _coreData = require("@wordpress/core-data");

var _compose = require("@wordpress/compose");

var _store = require("../../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function FullscreenModeClose(_ref) {
  let {
    showTooltip,
    icon,
    href
  } = _ref;
  const {
    isActive,
    isRequestingSiteIcon,
    postType,
    siteIconUrl
  } = (0, _data.useSelect)(select => {
    const {
      getCurrentPostType
    } = select(_editor.store);
    const {
      isFeatureActive
    } = select(_store.store);
    const {
      getEntityRecord,
      getPostType,
      isResolving
    } = select(_coreData.store);
    const siteData = getEntityRecord('root', '__unstableBase', undefined) || {};
    return {
      isActive: isFeatureActive('fullscreenMode'),
      isRequestingSiteIcon: isResolving('getEntityRecord', ['root', '__unstableBase', undefined]),
      postType: getPostType(getCurrentPostType()),
      siteIconUrl: siteData.site_icon_url
    };
  }, []);
  const disableMotion = (0, _compose.useReducedMotion)();

  if (!isActive || !postType) {
    return null;
  }

  let buttonIcon = (0, _element.createElement)(_components.Icon, {
    size: "36px",
    icon: _icons.wordpress
  });
  const effect = {
    expand: {
      scale: 1.25,
      transition: {
        type: 'tween',
        duration: '0.3'
      }
    }
  };

  if (siteIconUrl) {
    buttonIcon = (0, _element.createElement)(_components.__unstableMotion.img, {
      variants: !disableMotion && effect,
      alt: (0, _i18n.__)('Site Icon'),
      className: "edit-post-fullscreen-mode-close_site-icon",
      src: siteIconUrl
    });
  }

  if (isRequestingSiteIcon) {
    buttonIcon = null;
  } // Override default icon if custom icon is provided via props.


  if (icon) {
    buttonIcon = (0, _element.createElement)(_components.Icon, {
      size: "36px",
      icon: icon
    });
  }

  const classes = (0, _classnames.default)({
    'edit-post-fullscreen-mode-close': true,
    'has-icon': siteIconUrl
  });
  return (0, _element.createElement)(_components.__unstableMotion.div, {
    whileHover: "expand"
  }, (0, _element.createElement)(_components.Button, {
    className: classes,
    href: href !== null && href !== void 0 ? href : (0, _url.addQueryArgs)('edit.php', {
      post_type: postType.slug
    }),
    label: (0, _lodash.get)(postType, ['labels', 'view_items'], (0, _i18n.__)('Back')),
    showTooltip: showTooltip
  }, buttonIcon));
}

var _default = FullscreenModeClose;
exports.default = _default;
//# sourceMappingURL=index.js.map