"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const logger_1 = require("../utils/logger");
const types_1 = require("@directus/shared/types");
async function link(extensionsPath) {
    var _a;
    const extensionPath = process.cwd();
    const absoluteExtensionsPath = path_1.default.resolve(extensionsPath);
    if (!fs_extra_1.default.existsSync(absoluteExtensionsPath)) {
        (0, logger_1.log)(`Extensions folder does not exist at ${absoluteExtensionsPath}`, 'error');
        return;
    }
    const packagePath = path_1.default.resolve('package.json');
    if (!(await fs_extra_1.default.pathExists(packagePath))) {
        (0, logger_1.log)(`Current directory is not a valid package.`, 'error');
        return;
    }
    let manifestFile;
    try {
        manifestFile = await fs_extra_1.default.readJSON(packagePath);
    }
    catch (err) {
        (0, logger_1.log)(`Current directory is not a valid Directus extension.`, 'error');
        return;
    }
    const extensionManifest = types_1.ExtensionManifest.parse(manifestFile);
    const extensionName = extensionManifest.name;
    if (!extensionName) {
        (0, logger_1.log)(`Extension name not found in package.json`, 'error');
        return;
    }
    const type = (_a = extensionManifest['directus:extension']) === null || _a === void 0 ? void 0 : _a.type;
    if (!type) {
        (0, logger_1.log)(`Extension type not found in package.json`, 'error');
        return;
    }
    const extensionTarget = path_1.default.join(absoluteExtensionsPath, extensionName);
    try {
        fs_extra_1.default.ensureSymlinkSync(extensionPath, extensionTarget);
    }
    catch (error) {
        (0, logger_1.log)(error.message, 'error');
        (0, logger_1.log)(`Try running this command with administrator privileges`, 'info');
        return;
    }
    (0, logger_1.log)(`Linked ${extensionName} to ${extensionTarget}`);
    return;
}
exports.default = link;
