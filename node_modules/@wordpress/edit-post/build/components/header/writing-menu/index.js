"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _keycodes = require("@wordpress/keycodes");

var _preferences = require("@wordpress/preferences");

var _blockEditor = require("@wordpress/block-editor");

var _store = require("../../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function WritingMenu() {
  const registry = (0, _data.useRegistry)();
  const isDistractionFree = (0, _data.useSelect)(select => select(_blockEditor.store).getSettings().isDistractionFree, []);
  const blocks = (0, _data.useSelect)(select => select(_blockEditor.store).getBlocks(), []);
  const {
    setIsInserterOpened,
    setIsListViewOpened,
    closeGeneralSidebar
  } = (0, _data.useDispatch)(_store.store);
  const {
    set: setPreference
  } = (0, _data.useDispatch)(_preferences.store);
  const {
    selectBlock
  } = (0, _data.useDispatch)(_blockEditor.store);

  const toggleDistractionFree = () => {
    registry.batch(() => {
      setPreference('core/edit-post', 'fixedToolbar', false);
      setIsInserterOpened(false);
      setIsListViewOpened(false);
      closeGeneralSidebar();

      if (!isDistractionFree && !!blocks.length) {
        selectBlock(blocks[0].clientId);
      }
    });
  };

  const isLargeViewport = (0, _compose.useViewportMatch)('medium');

  if (!isLargeViewport) {
    return null;
  }

  return (0, _element.createElement)(_components.MenuGroup, {
    label: (0, _i18n._x)('View', 'noun')
  }, (0, _element.createElement)(_preferences.PreferenceToggleMenuItem, {
    scope: "core/edit-post",
    disabled: isDistractionFree,
    name: "fixedToolbar",
    label: (0, _i18n.__)('Top toolbar'),
    info: (0, _i18n.__)('Access all block and document tools in a single place'),
    messageActivated: (0, _i18n.__)('Top toolbar activated'),
    messageDeactivated: (0, _i18n.__)('Top toolbar deactivated')
  }), (0, _element.createElement)(_preferences.PreferenceToggleMenuItem, {
    scope: "core/edit-post",
    name: "focusMode",
    label: (0, _i18n.__)('Spotlight mode'),
    info: (0, _i18n.__)('Focus on one block at a time'),
    messageActivated: (0, _i18n.__)('Spotlight mode activated'),
    messageDeactivated: (0, _i18n.__)('Spotlight mode deactivated')
  }), (0, _element.createElement)(_preferences.PreferenceToggleMenuItem, {
    scope: "core/edit-post",
    name: "fullscreenMode",
    label: (0, _i18n.__)('Fullscreen mode'),
    info: (0, _i18n.__)('Show and hide admin UI'),
    messageActivated: (0, _i18n.__)('Fullscreen mode activated'),
    messageDeactivated: (0, _i18n.__)('Fullscreen mode deactivated'),
    shortcut: _keycodes.displayShortcut.secondary('f')
  }), (0, _element.createElement)(_preferences.PreferenceToggleMenuItem, {
    scope: "core/edit-post",
    name: "distractionFree",
    onToggle: toggleDistractionFree,
    label: (0, _i18n.__)('Distraction free'),
    info: (0, _i18n.__)('Write with calmness'),
    messageActivated: (0, _i18n.__)('Distraction free mode activated'),
    messageDeactivated: (0, _i18n.__)('Distraction free mode deactivated'),
    shortcut: _keycodes.displayShortcut.primaryShift('\\')
  }));
}

var _default = WritingMenu;
exports.default = _default;
//# sourceMappingURL=index.js.map