"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _lodash = require("lodash");

var _reactNative = require("react-native");

var _stack = require("@react-navigation/stack");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _data = require("@wordpress/data");

var _editor = require("@wordpress/editor");

var _reactNativeBridge = require("@wordpress/react-native-bridge");

var _style = _interopRequireDefault(require("./style.scss"));

var _helpDetailNavigationScreen = _interopRequireDefault(require("./help-detail-navigation-screen"));

var _helpTopicRow = _interopRequireDefault(require("./help-topic-row"));

var _helpGetSupportButton = _interopRequireDefault(require("./help-get-support-button"));

var _introToBlocks = _interopRequireDefault(require("./intro-to-blocks"));

var _addBlocks = _interopRequireDefault(require("./add-blocks"));

var _moveBlocks = _interopRequireDefault(require("./move-blocks"));

var _removeBlocks = _interopRequireDefault(require("./remove-blocks"));

var _customizeBlocks = _interopRequireDefault(require("./customize-blocks"));

var _iconMoveBlocks = _interopRequireDefault(require("./icon-move-blocks"));

var _helpSectionTitle = _interopRequireDefault(require("./help-section-title"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const HELP_TOPICS = [{
  label: (0, _i18n.__)('What is a block?'),
  icon: _icons.helpFilled,
  view: (0, _element.createElement)(_introToBlocks.default, null)
}, {
  label: (0, _i18n.__)('Add blocks'),
  icon: _icons.plusCircleFilled,
  view: (0, _element.createElement)(_addBlocks.default, null)
}, {
  label: (0, _i18n.__)('Move blocks'),
  icon: _iconMoveBlocks.default,
  view: (0, _element.createElement)(_moveBlocks.default, null)
}, {
  label: (0, _i18n.__)('Remove blocks'),
  icon: _icons.trash,
  view: (0, _element.createElement)(_removeBlocks.default, null)
}, {
  label: (0, _i18n.__)('Customize blocks'),
  icon: _icons.cog,
  view: (0, _element.createElement)(_customizeBlocks.default, null)
}];

function EditorHelpTopics(_ref) {
  let {
    close,
    isVisible,
    onClose,
    showSupport
  } = _ref;
  const {
    postType
  } = (0, _data.useSelect)(select => ({
    postType: select(_editor.store).getEditedPostAttribute('type')
  }));
  const title = postType === 'page' ? (0, _i18n.__)('How to edit your page') : (0, _i18n.__)('How to edit your post');
  const supportSection = (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_helpSectionTitle.default, null, (0, _i18n.__)('Get support')), (0, _element.createElement)(_helpGetSupportButton.default, {
    title: (0, _i18n.__)('Contact support'),
    onPress: _reactNativeBridge.requestContactCustomerSupport
  }), (0, _element.createElement)(_helpGetSupportButton.default, {
    title: (0, _i18n.__)('More support options'),
    onPress: _reactNativeBridge.requestGotoCustomerSupportOptions
  }));
  return (0, _element.createElement)(_components.BottomSheet, {
    isVisible: isVisible,
    onClose: onClose,
    hideHeader: true,
    hasNavigation: true,
    contentStyle: _style.default.contentContainer,
    testID: "editor-help-modal"
  }, (0, _element.createElement)(_reactNative.SafeAreaView, null, (0, _element.createElement)(_components.BottomSheet.NavigationContainer, {
    animate: true,
    main: true,
    style: _style.default.navigationContainer
  }, (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    isScrollable: true,
    fullScreen: true,
    name: "help-topics"
  }, (0, _element.createElement)(_reactNative.View, {
    style: _style.default.container
  }, (0, _element.createElement)(_components.BottomSheet.NavBar, null, (0, _element.createElement)(_components.BottomSheet.NavBar.DismissButton, {
    onPress: close,
    iosText: (0, _i18n.__)('Close')
  }), (0, _element.createElement)(_components.BottomSheet.NavBar.Heading, null, title)), (0, _element.createElement)(_components.BottomSheetConsumer, null, _ref2 => {
    let {
      listProps
    } = _ref2;

    const contentContainerStyle = _reactNative.StyleSheet.flatten(listProps.contentContainerStyle);

    return (0, _element.createElement)(_reactNative.ScrollView, (0, _extends2.default)({}, listProps, {
      contentContainerStyle: { ...contentContainerStyle,
        paddingBottom: Math.max(listProps.safeAreaBottomInset, contentContainerStyle.paddingBottom),

        /**
         * Remove margin set via `hideHeader`. Combining a header
         * and navigation in this bottom sheet is at odds with the
         * current `BottomSheet` implementation.
         */
        marginTop: 0
      }
    }), (0, _element.createElement)(_components.PanelBody, null, (0, _element.createElement)(_helpSectionTitle.default, null, (0, _i18n.__)('The basics')), HELP_TOPICS.map((_ref3, index) => {
      let {
        label,
        icon
      } = _ref3;
      const labelSlug = (0, _lodash.kebabCase)(label);
      const isLastItem = index === HELP_TOPICS.length - 1;
      return (0, _element.createElement)(_helpTopicRow.default, {
        key: labelSlug,
        label: label,
        icon: icon,
        screenName: labelSlug,
        isLastItem: isLastItem
      });
    }), showSupport && supportSection));
  }))), HELP_TOPICS.map(_ref4 => {
    let {
      view,
      label
    } = _ref4;
    const labelSlug = (0, _lodash.kebabCase)(label);
    return (0, _element.createElement)(_helpDetailNavigationScreen.default, {
      key: labelSlug,
      name: labelSlug,
      content: view,
      label: label,
      options: {
        gestureEnabled: false,
        ..._stack.TransitionPresets.DefaultTransition
      }
    });
  }))));
}

var _default = EditorHelpTopics;
exports.default = _default;
//# sourceMappingURL=index.native.js.map