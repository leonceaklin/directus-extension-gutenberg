"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditPostPreferencesModal;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _editor = require("@wordpress/editor");

var _interface = require("@wordpress/interface");

var _preferences = require("@wordpress/preferences");

var _options = require("./options");

var _metaBoxesSection = _interopRequireDefault(require("./meta-boxes-section"));

var _store = require("../../store");

var _blockManager = _interopRequireDefault(require("../block-manager"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const MODAL_NAME = 'edit-post/preferences';

function EditPostPreferencesModal() {
  const isLargeViewport = (0, _compose.useViewportMatch)('medium');
  const {
    closeModal
  } = (0, _data.useDispatch)(_store.store);
  const [isModalActive, showBlockBreadcrumbsOption] = (0, _data.useSelect)(select => {
    const {
      getEditorSettings
    } = select(_editor.store);
    const {
      getEditorMode,
      isFeatureActive
    } = select(_store.store);
    const modalActive = select(_store.store).isModalActive(MODAL_NAME);
    const mode = getEditorMode();
    const isRichEditingEnabled = getEditorSettings().richEditingEnabled;
    const isDistractionFreeEnabled = isFeatureActive('distractionFree');
    return [modalActive, !isDistractionFreeEnabled && isLargeViewport && isRichEditingEnabled && mode === 'visual', isDistractionFreeEnabled];
  }, [isLargeViewport]);
  const {
    closeGeneralSidebar,
    setIsListViewOpened,
    setIsInserterOpened
  } = (0, _data.useDispatch)(_store.store);
  const {
    set: setPreference
  } = (0, _data.useDispatch)(_preferences.store);

  const toggleDistractionFree = () => {
    setPreference('core/edit-post', 'fixedToolbar', false);
    setIsInserterOpened(false);
    setIsListViewOpened(false);
    closeGeneralSidebar();
  };

  const sections = (0, _element.useMemo)(() => [{
    name: 'general',
    tabLabel: (0, _i18n.__)('General'),
    content: (0, _element.createElement)(_element.Fragment, null, isLargeViewport && (0, _element.createElement)(_interface.PreferencesModalSection, {
      title: (0, _i18n.__)('Publishing'),
      description: (0, _i18n.__)('Change options related to publishing.')
    }, (0, _element.createElement)(_options.EnablePublishSidebarOption, {
      help: (0, _i18n.__)('Review settings, such as visibility and tags.'),
      label: (0, _i18n.__)('Include pre-publish checklist')
    })), (0, _element.createElement)(_interface.PreferencesModalSection, {
      title: (0, _i18n.__)('Appearance'),
      description: (0, _i18n.__)('Customize options related to the block editor interface and editing flow.')
    }, (0, _element.createElement)(_options.EnableFeature, {
      featureName: "distractionFree",
      onToggle: toggleDistractionFree,
      help: (0, _i18n.__)('Reduce visual distractions by hiding the toolbar and other elements to focus on writing.'),
      label: (0, _i18n.__)('Distraction free')
    }), (0, _element.createElement)(_options.EnableFeature, {
      featureName: "focusMode",
      help: (0, _i18n.__)('Highlights the current block and fades other content.'),
      label: (0, _i18n.__)('Spotlight mode')
    }), (0, _element.createElement)(_options.EnableFeature, {
      featureName: "showIconLabels",
      label: (0, _i18n.__)('Show button text labels'),
      help: (0, _i18n.__)('Show text instead of icons on buttons.')
    }), (0, _element.createElement)(_options.EnableFeature, {
      featureName: "showListViewByDefault",
      help: (0, _i18n.__)('Opens the block list view sidebar by default.'),
      label: (0, _i18n.__)('Always open list view')
    }), (0, _element.createElement)(_options.EnableFeature, {
      featureName: "themeStyles",
      help: (0, _i18n.__)('Make the editor look like your theme.'),
      label: (0, _i18n.__)('Use theme styles')
    }), showBlockBreadcrumbsOption && (0, _element.createElement)(_options.EnableFeature, {
      featureName: "showBlockBreadcrumbs",
      help: (0, _i18n.__)('Shows block breadcrumbs at the bottom of the editor.'),
      label: (0, _i18n.__)('Display block breadcrumbs')
    })))
  }, {
    name: 'blocks',
    tabLabel: (0, _i18n.__)('Blocks'),
    content: (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_interface.PreferencesModalSection, {
      title: (0, _i18n.__)('Block interactions'),
      description: (0, _i18n.__)('Customize how you interact with blocks in the block library and editing canvas.')
    }, (0, _element.createElement)(_options.EnableFeature, {
      featureName: "mostUsedBlocks",
      help: (0, _i18n.__)('Places the most frequent blocks in the block library.'),
      label: (0, _i18n.__)('Show most used blocks')
    }), (0, _element.createElement)(_options.EnableFeature, {
      featureName: "keepCaretInsideBlock",
      help: (0, _i18n.__)('Aids screen readers by stopping text caret from leaving blocks.'),
      label: (0, _i18n.__)('Contain text cursor inside block')
    })), (0, _element.createElement)(_interface.PreferencesModalSection, {
      title: (0, _i18n.__)('Visible blocks'),
      description: (0, _i18n.__)("Disable blocks that you don't want to appear in the inserter. They can always be toggled back on later.")
    }, (0, _element.createElement)(_blockManager.default, null)))
  }, {
    name: 'panels',
    tabLabel: (0, _i18n.__)('Panels'),
    content: (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_interface.PreferencesModalSection, {
      title: (0, _i18n.__)('Document settings'),
      description: (0, _i18n.__)('Choose what displays in the panel.')
    }, (0, _element.createElement)(_options.EnablePluginDocumentSettingPanelOption.Slot, null), (0, _element.createElement)(_editor.PostTaxonomies, {
      taxonomyWrapper: (content, taxonomy) => (0, _element.createElement)(_options.EnablePanelOption, {
        label: (0, _lodash.get)(taxonomy, ['labels', 'menu_name']),
        panelName: `taxonomy-panel-${taxonomy.slug}`
      })
    }), (0, _element.createElement)(_editor.PostFeaturedImageCheck, null, (0, _element.createElement)(_options.EnablePanelOption, {
      label: (0, _i18n.__)('Featured image'),
      panelName: "featured-image"
    })), (0, _element.createElement)(_editor.PostExcerptCheck, null, (0, _element.createElement)(_options.EnablePanelOption, {
      label: (0, _i18n.__)('Excerpt'),
      panelName: "post-excerpt"
    })), (0, _element.createElement)(_editor.PostTypeSupportCheck, {
      supportKeys: ['comments', 'trackbacks']
    }, (0, _element.createElement)(_options.EnablePanelOption, {
      label: (0, _i18n.__)('Discussion'),
      panelName: "discussion-panel"
    })), (0, _element.createElement)(_editor.PageAttributesCheck, null, (0, _element.createElement)(_options.EnablePanelOption, {
      label: (0, _i18n.__)('Page attributes'),
      panelName: "page-attributes"
    }))), (0, _element.createElement)(_metaBoxesSection.default, {
      title: (0, _i18n.__)('Additional'),
      description: (0, _i18n.__)('Add extra areas to the editor.')
    }))
  }], [isLargeViewport, showBlockBreadcrumbsOption]);

  if (!isModalActive) {
    return null;
  }

  return (0, _element.createElement)(_interface.PreferencesModal, {
    closeModal: closeModal
  }, (0, _element.createElement)(_interface.PreferencesModalTabs, {
    sections: sections
  }));
}
//# sourceMappingURL=index.js.map