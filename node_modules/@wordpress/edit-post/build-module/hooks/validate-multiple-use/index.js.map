{"version":3,"sources":["@wordpress/edit-post/src/hooks/validate-multiple-use/index.js"],"names":["createBlock","findTransform","getBlockTransforms","getBlockType","hasBlockSupport","Button","withSelect","withDispatch","Warning","store","blockEditorStore","addFilter","__","compose","createHigherOrderComponent","enhance","select","block","multiple","name","blocks","getBlocks","firstOfSameType","find","isInvalid","clientId","originalBlockClientId","dispatch","selectFirst","selectBlock","withMultipleValidation","BlockEdit","props","blockType","outboundType","getOutboundType","minHeight","onReplace","attributes","title","blockName","transform","type","length"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tcreateBlock,\n\tfindTransform,\n\tgetBlockTransforms,\n\tgetBlockType,\n\thasBlockSupport,\n} from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { Warning, store as blockEditorStore } from '@wordpress/block-editor';\nimport { addFilter } from '@wordpress/hooks';\nimport { __ } from '@wordpress/i18n';\nimport { compose, createHigherOrderComponent } from '@wordpress/compose';\n\nconst enhance = compose(\n\t/**\n\t * For blocks whose block type doesn't support `multiple`, provides the\n\t * wrapped component with `originalBlockClientId` -- a reference to the\n\t * first block of the same type in the content -- if and only if that\n\t * \"original\" block is not the current one. Thus, an inexisting\n\t * `originalBlockClientId` prop signals that the block is valid.\n\t *\n\t * @param {WPComponent} WrappedBlockEdit A filtered BlockEdit instance.\n\t *\n\t * @return {WPComponent} Enhanced component with merged state data props.\n\t */\n\twithSelect( ( select, block ) => {\n\t\tconst multiple = hasBlockSupport( block.name, 'multiple', true );\n\n\t\t// For block types with `multiple` support, there is no \"original\n\t\t// block\" to be found in the content, as the block itself is valid.\n\t\tif ( multiple ) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Otherwise, only pass `originalBlockClientId` if it refers to a different\n\t\t// block from the current one.\n\t\tconst blocks = select( blockEditorStore ).getBlocks();\n\t\tconst firstOfSameType = blocks.find(\n\t\t\t( { name } ) => block.name === name\n\t\t);\n\t\tconst isInvalid =\n\t\t\tfirstOfSameType && firstOfSameType.clientId !== block.clientId;\n\t\treturn {\n\t\t\toriginalBlockClientId: isInvalid && firstOfSameType.clientId,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, { originalBlockClientId } ) => ( {\n\t\tselectFirst: () =>\n\t\t\tdispatch( blockEditorStore ).selectBlock( originalBlockClientId ),\n\t} ) )\n);\n\nconst withMultipleValidation = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn enhance( ( { originalBlockClientId, selectFirst, ...props } ) => {\n\t\tif ( ! originalBlockClientId ) {\n\t\t\treturn <BlockEdit { ...props } />;\n\t\t}\n\n\t\tconst blockType = getBlockType( props.name );\n\t\tconst outboundType = getOutboundType( props.name );\n\n\t\treturn [\n\t\t\t<div key=\"invalid-preview\" style={ { minHeight: '60px' } }>\n\t\t\t\t<BlockEdit key=\"block-edit\" { ...props } />\n\t\t\t</div>,\n\t\t\t<Warning\n\t\t\t\tkey=\"multiple-use-warning\"\n\t\t\t\tactions={ [\n\t\t\t\t\t<Button\n\t\t\t\t\t\tkey=\"find-original\"\n\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\tonClick={ selectFirst }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ __( 'Find original' ) }\n\t\t\t\t\t</Button>,\n\t\t\t\t\t<Button\n\t\t\t\t\t\tkey=\"remove\"\n\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\tonClick={ () => props.onReplace( [] ) }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ __( 'Remove' ) }\n\t\t\t\t\t</Button>,\n\t\t\t\t\toutboundType && (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tkey=\"transform\"\n\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\tonClick={ () =>\n\t\t\t\t\t\t\t\tprops.onReplace(\n\t\t\t\t\t\t\t\t\tcreateBlock(\n\t\t\t\t\t\t\t\t\t\toutboundType.name,\n\t\t\t\t\t\t\t\t\t\tprops.attributes\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ __( 'Transform into:' ) } { outboundType.title }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t),\n\t\t\t\t] }\n\t\t\t>\n\t\t\t\t<strong>{ blockType?.title }: </strong>\n\t\t\t\t{ __( 'This block can only be used once.' ) }\n\t\t\t</Warning>,\n\t\t];\n\t} );\n}, 'withMultipleValidation' );\n\n/**\n * Given a base block name, returns the default block type to which to offer\n * transforms.\n *\n * @param {string} blockName Base block name.\n *\n * @return {?Object} The chosen default block type.\n */\nfunction getOutboundType( blockName ) {\n\t// Grab the first outbound transform.\n\tconst transform = findTransform(\n\t\tgetBlockTransforms( 'to', blockName ),\n\t\t( { type, blocks } ) => type === 'block' && blocks.length === 1 // What about when .length > 1?\n\t);\n\n\tif ( ! transform ) {\n\t\treturn null;\n\t}\n\n\treturn getBlockType( transform.blocks[ 0 ] );\n}\n\naddFilter(\n\t'editor.BlockEdit',\n\t'core/edit-post/validate-multiple-use/with-multiple-validation',\n\twithMultipleValidation\n);\n"]}