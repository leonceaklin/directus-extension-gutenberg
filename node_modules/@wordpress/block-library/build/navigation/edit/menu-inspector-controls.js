"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _manageMenusButton = _interopRequireDefault(require("./manage-menus-button"));

var _navigationMenuSelector = _interopRequireDefault(require("./navigation-menu-selector"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const MenuInspectorControls = _ref => {
  var _window, _window2;

  let {
    clientId,
    createNavigationMenuIsSuccess,
    createNavigationMenuIsError,
    currentMenuId = null,
    isNavigationMenuMissing,
    isManageMenusButtonDisabled,
    onCreateNew,
    onSelectClassicMenu,
    onSelectNavigationMenu
  } = _ref;
  const isOffCanvasNavigationEditorEnabled = ((_window = window) === null || _window === void 0 ? void 0 : _window.__experimentalEnableOffCanvasNavigationEditor) === true;
  const menuControlsSlot = (_window2 = window) !== null && _window2 !== void 0 && _window2.__experimentalEnableBlockInspectorTabs ? 'list' : undefined;
  /* translators: %s: The name of a menu. */

  const actionLabel = (0, _i18n.__)("Switch to '%s'"); // Provide a hierarchy of clientIds for the given Navigation block (clientId).
  // This is required else the list view will display the entire block tree.

  const clientIdsTree = (0, _data.useSelect)(select => {
    const {
      __unstableGetClientIdsTree
    } = select(_blockEditor.store);
    return __unstableGetClientIdsTree(clientId);
  }, [clientId]);
  return (0, _element.createElement)(_blockEditor.InspectorControls, {
    __experimentalGroup: menuControlsSlot
  }, (0, _element.createElement)(_components.PanelBody, {
    title: isOffCanvasNavigationEditorEnabled ? null : (0, _i18n.__)('Menu')
  }, isOffCanvasNavigationEditorEnabled ? (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.__experimentalHStack, {
    className: "wp-block-navigation-off-canvas-editor__header"
  }, (0, _element.createElement)(_components.__experimentalHeading, {
    className: "wp-block-navigation-off-canvas-editor__title",
    level: 2
  }, (0, _i18n.__)('Menu')), (0, _element.createElement)(_navigationMenuSelector.default, {
    currentMenuId: currentMenuId,
    onSelectClassicMenu: onSelectClassicMenu,
    onSelectNavigationMenu: onSelectNavigationMenu,
    onCreateNew: onCreateNew,
    createNavigationMenuIsSuccess: createNavigationMenuIsSuccess,
    createNavigationMenuIsError: createNavigationMenuIsError,
    actionLabel: actionLabel
  })), currentMenuId && isNavigationMenuMissing ? (0, _element.createElement)("p", null, (0, _i18n.__)('Select or create a menu')) : (0, _element.createElement)(_blockEditor.__experimentalOffCanvasEditor, {
    blocks: clientIdsTree,
    isExpanded: true,
    selectBlockInCanvas: false
  })) : (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_navigationMenuSelector.default, {
    currentMenuId: currentMenuId,
    onSelectClassicMenu: onSelectClassicMenu,
    onSelectNavigationMenu: onSelectNavigationMenu,
    onCreateNew: onCreateNew,
    createNavigationMenuIsSuccess: createNavigationMenuIsSuccess,
    createNavigationMenuIsError: createNavigationMenuIsError,
    actionLabel: actionLabel
  }), (0, _element.createElement)(_manageMenusButton.default, {
    disabled: isManageMenusButtonDisabled
  }))));
};

var _default = MenuInspectorControls;
exports.default = _default;
//# sourceMappingURL=menu-inspector-controls.js.map