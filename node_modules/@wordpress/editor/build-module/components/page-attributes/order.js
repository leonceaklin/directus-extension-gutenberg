import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { TextControl } from '@wordpress/components';
import { withSelect, withDispatch } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { useState } from '@wordpress/element';
/**
 * Internal dependencies
 */

import PostTypeSupportCheck from '../post-type-support-check';
import { store as editorStore } from '../../store';
export const PageAttributesOrder = _ref => {
  let {
    onUpdateOrder,
    order = 0
  } = _ref;
  const [orderInput, setOrderInput] = useState(null);

  const setUpdatedOrder = value => {
    var _value$trim;

    setOrderInput(value);
    const newOrder = Number(value);

    if (Number.isInteger(newOrder) && ((_value$trim = value.trim) === null || _value$trim === void 0 ? void 0 : _value$trim.call(value)) !== '') {
      onUpdateOrder(Number(value));
    }
  };

  const value = orderInput === null ? order : orderInput;
  return createElement(TextControl, {
    className: "editor-page-attributes__order",
    type: "number",
    label: __('Order'),
    value: value,
    onChange: setUpdatedOrder,
    size: 6,
    onBlur: () => {
      setOrderInput(null);
    }
  });
};

function PageAttributesOrderWithChecks(props) {
  return createElement(PostTypeSupportCheck, {
    supportKeys: "page-attributes"
  }, createElement(PageAttributesOrder, props));
}

export default compose([withSelect(select => {
  return {
    order: select(editorStore).getEditedPostAttribute('menu_order')
  };
}), withDispatch(dispatch => ({
  onUpdateOrder(order) {
    dispatch(editorStore).editPost({
      menu_order: order
    });
  }

}))])(PageAttributesOrderWithChecks);
//# sourceMappingURL=order.js.map