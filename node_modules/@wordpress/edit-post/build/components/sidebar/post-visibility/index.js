"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PostVisibility = PostVisibility;
exports.default = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _editor = require("@wordpress/editor");

/**
 * WordPress dependencies
 */
function PostVisibility() {
  // Use internal state instead of a ref to make sure that the component
  // re-renders when the popover's anchor updates.
  const [popoverAnchor, setPopoverAnchor] = (0, _element.useState)(null); // Memoize popoverProps to avoid returning a new object every time.

  const popoverProps = (0, _element.useMemo)(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor
  }), [popoverAnchor]);
  return (0, _element.createElement)(_editor.PostVisibilityCheck, {
    render: _ref => {
      let {
        canEdit
      } = _ref;
      return (0, _element.createElement)(_components.PanelRow, {
        ref: setPopoverAnchor,
        className: "edit-post-post-visibility"
      }, (0, _element.createElement)("span", null, (0, _i18n.__)('Visibility')), !canEdit && (0, _element.createElement)("span", null, (0, _element.createElement)(_editor.PostVisibilityLabel, null)), canEdit && (0, _element.createElement)(_components.Dropdown, {
        position: "bottom left",
        contentClassName: "edit-post-post-visibility__dialog",
        popoverProps: popoverProps,
        focusOnMount: true,
        renderToggle: _ref2 => {
          let {
            isOpen,
            onToggle
          } = _ref2;
          return (0, _element.createElement)(PostVisibilityToggle, {
            isOpen: isOpen,
            onClick: onToggle
          });
        },
        renderContent: _ref3 => {
          let {
            onClose
          } = _ref3;
          return (0, _element.createElement)(_editor.PostVisibility, {
            onClose: onClose
          });
        }
      }));
    }
  });
}

function PostVisibilityToggle(_ref4) {
  let {
    isOpen,
    onClick
  } = _ref4;
  const label = (0, _editor.usePostVisibilityLabel)();
  return (0, _element.createElement)(_components.Button, {
    className: "edit-post-post-visibility__toggle",
    variant: "tertiary",
    "aria-expanded": isOpen // translators: %s: Current post visibility.
    ,
    "aria-label": (0, _i18n.sprintf)((0, _i18n.__)('Select visibility: %s'), label),
    onClick: onClick
  }, label);
}

var _default = PostVisibility;
exports.default = _default;
//# sourceMappingURL=index.js.map