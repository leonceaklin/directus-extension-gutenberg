{"version":3,"sources":["@wordpress/editor/src/store/actions.js"],"names":["setupEditor","post","edits","template","dispatch","setupEditorState","isNewPost","status","content","raw","blocks","resetEditorBlocks","__unstableShouldCreateUndoLevel","Object","values","some","key","edit","editPost","__experimentalTearDownEditor","type","resetPost","since","version","alternative","updatePost","options","select","registry","id","getCurrentPost","coreStore","editEntityRecord","savePost","isEditedPostSaveable","getEditedPostContent","isAutosave","undoIgnore","previousRecord","getEntityRecordNonTransientEdits","saveEntityRecord","error","getLastEntitySaveError","args","length","noticesStore","createErrorNotice","updatedRecord","previousPost","postType","resolveSelect","getPostType","createSuccessNotice","blockEditorStore","__unstableMarkLastChangeAsPersistent","refreshPost","trashPost","postTypeSlug","getCurrentPostType","removeNotice","TRASH_POST_NOTICE_ID","rest_base","restBase","rest_namespace","restNamespace","path","method","autosave","local","isPostNew","isEditedPostNew","title","getEditedPostAttribute","excerpt","redo","undo","createUndoLevel","updatePostLock","lock","enablePublishSidebar","preferencesStore","set","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","lockPostAutosaving","unlockPostAutosaving","selection","noChange","getEditedEntityRecord","__unstableCreateUndoLevel","blocksForSerialization","updateEditorSettings","settings","getBlockEditorAction","name","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","clearSelectedBlock","toggleSelection","replaceBlocks","replaceBlock","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport deprecated from '@wordpress/deprecated';\nimport {\n\tparse,\n\tsynchronizeBlocksWithTemplate,\n\t__unstableSerializeAndClean,\n} from '@wordpress/blocks';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { store as preferencesStore } from '@wordpress/preferences';\n\n/**\n * Internal dependencies\n */\nimport { TRASH_POST_NOTICE_ID } from './constants';\nimport { localAutosaveSet } from './local-autosave';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\n\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post     Post object.\n * @param {Object} edits    Initial edited attributes object.\n * @param {Array?} template Block Template.\n */\nexport const setupEditor =\n\t( post, edits, template ) =>\n\t( { dispatch } ) => {\n\t\tdispatch.setupEditorState( post );\n\t\t// Apply a template for new posts only, if exists.\n\t\tconst isNewPost = post.status === 'auto-draft';\n\t\tif ( isNewPost && template ) {\n\t\t\t// In order to ensure maximum of a single parse during setup, edits are\n\t\t\t// included as part of editor setup action. Assume edited content as\n\t\t\t// canonical if provided, falling back to post.\n\t\t\tlet content;\n\t\t\tif ( 'content' in edits ) {\n\t\t\t\tcontent = edits.content;\n\t\t\t} else {\n\t\t\t\tcontent = post.content.raw;\n\t\t\t}\n\t\t\tlet blocks = parse( content );\n\t\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t\t\tdispatch.resetEditorBlocks( blocks, {\n\t\t\t\t__unstableShouldCreateUndoLevel: false,\n\t\t\t} );\n\t\t}\n\t\tif (\n\t\t\tedits &&\n\t\t\tObject.values( edits ).some(\n\t\t\t\t( [ key, edit ] ) =>\n\t\t\t\t\tedit !== ( post[ key ]?.raw ?? post[ key ] )\n\t\t\t)\n\t\t) {\n\t\t\tdispatch.editPost( edits );\n\t\t}\n\t};\n\n/**\n * Returns an action object signalling that the editor is being destroyed and\n * that any necessary state or side-effect cleanup should occur.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalTearDownEditor() {\n\treturn { type: 'TEAR_DOWN_EDITOR' };\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @deprecated Since WordPress 6.0.\n */\nexport function resetPost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).resetPost\", {\n\t\tsince: '6.0',\n\t\tversion: '6.3',\n\t\talternative: 'Initialize the editor with the setupEditorState action',\n\t} );\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @return {Object} Action object.\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function updatePost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).updatePost\", {\n\t\tsince: '5.7',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Returns an action object used to setup the editor state when first opening\n * an editor.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditorState( post ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR_STATE',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits   Post attributes to edit.\n * @param {Object} options Options for the edit.\n */\nexport const editPost =\n\t( edits, options ) =>\n\t( { select, registry } ) => {\n\t\tconst { id, type } = select.getCurrentPost();\n\t\tregistry\n\t\t\t.dispatch( coreStore )\n\t\t\t.editEntityRecord( 'postType', type, id, edits, options );\n\t};\n\n/**\n * Action for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport const savePost =\n\t( options = {} ) =>\n\tasync ( { select, dispatch, registry } ) => {\n\t\tif ( ! select.isEditedPostSaveable() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst content = select.getEditedPostContent();\n\n\t\tif ( ! options.isAutosave ) {\n\t\t\tdispatch.editPost( { content }, { undoIgnore: true } );\n\t\t}\n\n\t\tconst previousRecord = select.getCurrentPost();\n\t\tconst edits = {\n\t\t\tid: previousRecord.id,\n\t\t\t...registry\n\t\t\t\t.select( coreStore )\n\t\t\t\t.getEntityRecordNonTransientEdits(\n\t\t\t\t\t'postType',\n\t\t\t\t\tpreviousRecord.type,\n\t\t\t\t\tpreviousRecord.id\n\t\t\t\t),\n\t\t\tcontent,\n\t\t};\n\t\tdispatch( { type: 'REQUEST_POST_UPDATE_START', options } );\n\t\tawait registry\n\t\t\t.dispatch( coreStore )\n\t\t\t.saveEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\tpreviousRecord.type,\n\t\t\t\tedits,\n\t\t\t\toptions\n\t\t\t);\n\t\tdispatch( { type: 'REQUEST_POST_UPDATE_FINISH', options } );\n\n\t\tconst error = registry\n\t\t\t.select( coreStore )\n\t\t\t.getLastEntitySaveError(\n\t\t\t\t'postType',\n\t\t\t\tpreviousRecord.type,\n\t\t\t\tpreviousRecord.id\n\t\t\t);\n\t\tif ( error ) {\n\t\t\tconst args = getNotificationArgumentsForSaveFail( {\n\t\t\t\tpost: previousRecord,\n\t\t\t\tedits,\n\t\t\t\terror,\n\t\t\t} );\n\t\t\tif ( args.length ) {\n\t\t\t\tregistry.dispatch( noticesStore ).createErrorNotice( ...args );\n\t\t\t}\n\t\t} else {\n\t\t\tconst updatedRecord = select.getCurrentPost();\n\t\t\tconst args = getNotificationArgumentsForSaveSuccess( {\n\t\t\t\tpreviousPost: previousRecord,\n\t\t\t\tpost: updatedRecord,\n\t\t\t\tpostType: await registry\n\t\t\t\t\t.resolveSelect( coreStore )\n\t\t\t\t\t.getPostType( updatedRecord.type ),\n\t\t\t\toptions,\n\t\t\t} );\n\t\t\tif ( args.length ) {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( noticesStore )\n\t\t\t\t\t.createSuccessNotice( ...args );\n\t\t\t}\n\t\t\t// Make sure that any edits after saving create an undo level and are\n\t\t\t// considered for change detection.\n\t\t\tif ( ! options.isAutosave ) {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t\t.__unstableMarkLastChangeAsPersistent();\n\t\t\t}\n\t\t}\n\t};\n\n/**\n * Action for refreshing the current post.\n *\n * @deprecated Since WordPress 6.0.\n */\nexport function refreshPost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).refreshPost\", {\n\t\tsince: '6.0',\n\t\tversion: '6.3',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Action for trashing the current post in the editor.\n */\nexport const trashPost =\n\t() =>\n\tasync ( { select, dispatch, registry } ) => {\n\t\tconst postTypeSlug = select.getCurrentPostType();\n\t\tconst postType = await registry\n\t\t\t.resolveSelect( coreStore )\n\t\t\t.getPostType( postTypeSlug );\n\t\tregistry.dispatch( noticesStore ).removeNotice( TRASH_POST_NOTICE_ID );\n\t\tconst { rest_base: restBase, rest_namespace: restNamespace = 'wp/v2' } =\n\t\t\tpostType;\n\t\tdispatch( { type: 'REQUEST_POST_DELETE_START' } );\n\t\ttry {\n\t\t\tconst post = select.getCurrentPost();\n\t\t\tawait apiFetch( {\n\t\t\t\tpath: `/${ restNamespace }/${ restBase }/${ post.id }`,\n\t\t\t\tmethod: 'DELETE',\n\t\t\t} );\n\n\t\t\tawait dispatch.savePost();\n\t\t} catch ( error ) {\n\t\t\tregistry\n\t\t\t\t.dispatch( noticesStore )\n\t\t\t\t.createErrorNotice(\n\t\t\t\t\t...getNotificationArgumentsForTrashFail( { error } )\n\t\t\t\t);\n\t\t}\n\t\tdispatch( { type: 'REQUEST_POST_DELETE_FINISH' } );\n\t};\n\n/**\n * Action that autosaves the current post.  This\n * includes server-side autosaving (default) and client-side (a.k.a. local)\n * autosaving (e.g. on the Web, the post might be committed to Session\n * Storage).\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport const autosave =\n\t( { local = false, ...options } = {} ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tif ( local ) {\n\t\t\tconst post = select.getCurrentPost();\n\t\t\tconst isPostNew = select.isEditedPostNew();\n\t\t\tconst title = select.getEditedPostAttribute( 'title' );\n\t\t\tconst content = select.getEditedPostAttribute( 'content' );\n\t\t\tconst excerpt = select.getEditedPostAttribute( 'excerpt' );\n\t\t\tlocalAutosaveSet( post.id, isPostNew, title, content, excerpt );\n\t\t} else {\n\t\t\tawait dispatch.savePost( { isAutosave: true, ...options } );\n\t\t}\n\t};\n\n/**\n * Action that restores last popped state in undo history.\n */\nexport const redo =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry.dispatch( coreStore ).redo();\n\t};\n\n/**\n * Action that pops a record from undo history and undoes the edit.\n */\nexport const undo =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry.dispatch( coreStore ).undo();\n\t};\n\n/**\n * Action that creates an undo history record.\n *\n * @deprecated Since WordPress 6.0\n */\nexport function createUndoLevel() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).createUndoLevel\", {\n\t\tsince: '6.0',\n\t\tversion: '6.3',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Action that locks the editor.\n *\n * @param {Object} lock Details about the post lock status, user, and nonce.\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Enable the publish sidebar.\n */\nexport const enablePublishSidebar =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core/edit-post', 'isPublishSidebarEnabled', true );\n\t};\n\n/**\n * Disables the publish sidebar.\n */\nexport const disablePublishSidebar =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core/edit-post', 'isPublishSidebarEnabled', false );\n\t};\n\n/**\n * Action that locks post saving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * const { subscribe } = wp.data;\n *\n * const initialPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n *\n * // Only allow publishing posts that are set to a future date.\n * if ( 'publish' !== initialPostStatus ) {\n *\n * \t// Track locking.\n * \tlet locked = false;\n *\n * \t// Watch for the publish event.\n * \tlet unssubscribe = subscribe( () => {\n * \t\tconst currentPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n * \t\tif ( 'publish' !== currentPostStatus ) {\n *\n * \t\t\t// Compare the post date to the current date, lock the post if the date isn't in the future.\n * \t\t\tconst postDate = new Date( wp.data.select( 'core/editor' ).getEditedPostAttribute( 'date' ) );\n * \t\t\tconst currentDate = new Date();\n * \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n * \t\t\t\tif ( ! locked ) {\n * \t\t\t\t\tlocked = true;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).lockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t} else {\n * \t\t\t\tif ( locked ) {\n * \t\t\t\t\tlocked = false;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).unlockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t}\n * \t\t}\n * \t} );\n * }\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Action that unlocks post saving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Action that locks post autosaving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Lock post autosaving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).lockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Action that unlocks post autosaving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n */\nexport const resetEditorBlocks =\n\t( blocks, options = {} ) =>\n\t( { select, dispatch, registry } ) => {\n\t\tconst { __unstableShouldCreateUndoLevel, selection } = options;\n\t\tconst edits = { blocks, selection };\n\n\t\tif ( __unstableShouldCreateUndoLevel !== false ) {\n\t\t\tconst { id, type } = select.getCurrentPost();\n\t\t\tconst noChange =\n\t\t\t\tregistry\n\t\t\t\t\t.select( coreStore )\n\t\t\t\t\t.getEditedEntityRecord( 'postType', type, id ).blocks ===\n\t\t\t\tedits.blocks;\n\t\t\tif ( noChange ) {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( coreStore )\n\t\t\t\t\t.__unstableCreateUndoLevel( 'postType', type, id );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We create a new function here on every persistent edit\n\t\t\t// to make sure the edit makes the post dirty and creates\n\t\t\t// a new undo level.\n\t\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\t\t__unstableSerializeAndClean( blocksForSerialization );\n\t\t}\n\n\t\tdispatch.editPost( edits );\n\t};\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction =\n\t( name ) =>\n\t( ...args ) =>\n\t( { registry } ) => {\n\t\tdeprecated( \"`wp.data.dispatch( 'core/editor' ).\" + name + '`', {\n\t\t\tsince: '5.3',\n\t\t\talternative:\n\t\t\t\t\"`wp.data.dispatch( 'core/block-editor' ).\" + name + '`',\n\t\t\tversion: '6.2',\n\t\t} );\n\t\tregistry.dispatch( blockEditorStore )[ name ]( ...args );\n\t};\n\n/**\n * @see resetBlocks in core/block-editor store.\n */\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\n\n/**\n * @see receiveBlocks in core/block-editor store.\n */\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\n\n/**\n * @see updateBlock in core/block-editor store.\n */\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\n\n/**\n * @see updateBlockAttributes in core/block-editor store.\n */\nexport const updateBlockAttributes = getBlockEditorAction(\n\t'updateBlockAttributes'\n);\n\n/**\n * @see selectBlock in core/block-editor store.\n */\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\n\n/**\n * @see startMultiSelect in core/block-editor store.\n */\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\n\n/**\n * @see stopMultiSelect in core/block-editor store.\n */\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\n\n/**\n * @see multiSelect in core/block-editor store.\n */\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\n\n/**\n * @see clearSelectedBlock in core/block-editor store.\n */\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\n\n/**\n * @see toggleSelection in core/block-editor store.\n */\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\n\n/**\n * @see replaceBlocks in core/block-editor store.\n */\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\n\n/**\n * @see replaceBlock in core/block-editor store.\n */\nexport const replaceBlock = getBlockEditorAction( 'replaceBlock' );\n\n/**\n * @see moveBlocksDown in core/block-editor store.\n */\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\n\n/**\n * @see moveBlocksUp in core/block-editor store.\n */\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\n\n/**\n * @see moveBlockToPosition in core/block-editor store.\n */\nexport const moveBlockToPosition = getBlockEditorAction(\n\t'moveBlockToPosition'\n);\n\n/**\n * @see insertBlock in core/block-editor store.\n */\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\n\n/**\n * @see insertBlocks in core/block-editor store.\n */\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\n\n/**\n * @see showInsertionPoint in core/block-editor store.\n */\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\n\n/**\n * @see hideInsertionPoint in core/block-editor store.\n */\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\n\n/**\n * @see setTemplateValidity in core/block-editor store.\n */\nexport const setTemplateValidity = getBlockEditorAction(\n\t'setTemplateValidity'\n);\n\n/**\n * @see synchronizeTemplate in core/block-editor store.\n */\nexport const synchronizeTemplate = getBlockEditorAction(\n\t'synchronizeTemplate'\n);\n\n/**\n * @see mergeBlocks in core/block-editor store.\n */\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\n\n/**\n * @see removeBlocks in core/block-editor store.\n */\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\n\n/**\n * @see removeBlock in core/block-editor store.\n */\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\n\n/**\n * @see toggleBlockMode in core/block-editor store.\n */\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\n\n/**\n * @see startTyping in core/block-editor store.\n */\nexport const startTyping = getBlockEditorAction( 'startTyping' );\n\n/**\n * @see stopTyping in core/block-editor store.\n */\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\n\n/**\n * @see enterFormattedText in core/block-editor store.\n */\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\n\n/**\n * @see exitFormattedText in core/block-editor store.\n */\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\n\n/**\n * @see insertDefaultBlock in core/block-editor store.\n */\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\n\n/**\n * @see updateBlockListSettings in core/block-editor store.\n */\nexport const updateBlockListSettings = getBlockEditorAction(\n\t'updateBlockListSettings'\n);\n"]}