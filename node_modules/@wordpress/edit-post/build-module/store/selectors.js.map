{"version":3,"sources":["@wordpress/edit-post/src/store/selectors.js"],"names":["createSelector","createRegistrySelector","store","interfaceStore","preferencesStore","coreStore","editorStore","deprecated","EMPTY_ARRAY","EMPTY_OBJECT","getEditorMode","select","get","isEditorSidebarOpened","activeGeneralSidebar","getActiveComplementaryArea","includes","isPluginSidebarOpened","getActiveGeneralSidebarName","convertPanelsToOldFormat","inactivePanels","openPanels","panelsWithEnabledState","reduce","accumulatedPanels","panelName","enabled","panels","currentPanelState","opened","getPreferences","since","alternative","preferences","accumulatedPrefs","preferenceKey","value","getPreference","state","defaultValue","undefined","getHiddenBlockTypes","isPublishSidebarOpened","publishSidebarActive","isEditorPanelRemoved","removedPanels","isEditorPanelEnabled","isEditorPanelOpened","isModalActive","modalName","activeModal","isFeatureActive","feature","isPluginItemPinned","pluginName","isItemPinned","getActiveMetaBoxLocations","Object","keys","metaBoxes","locations","filter","location","isMetaBoxLocationActive","isMetaBoxLocationVisible","getMetaBoxesPerLocation","some","id","length","getAllMetaBoxes","values","flat","hasMetaBoxes","isSavingMetaBoxes","isSaving","__experimentalGetPreviewDeviceType","deviceType","isInserterOpened","blockInserterPanel","__experimentalGetInsertionPoint","rootClientId","insertionIndex","filterValue","isListViewOpened","listViewPanel","isEditingTemplate","areMetaBoxesInitialized","initialized","getEditedPostTemplate","currentTemplate","getEditedPostAttribute","templateWithSameSlug","getEntityRecords","per_page","find","template","slug","getEditedEntityRecord","post","getCurrentPost","link","__experimentalGetTemplateForLink"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { store as interfaceStore } from '@wordpress/interface';\nimport { store as preferencesStore } from '@wordpress/preferences';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as editorStore } from '@wordpress/editor';\nimport deprecated from '@wordpress/deprecated';\n\nconst EMPTY_ARRAY = [];\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns the current editing mode.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Editing mode.\n */\nexport const getEditorMode = createRegistrySelector(\n\t( select ) => () =>\n\t\tselect( preferencesStore ).get( 'core/edit-post', 'editorMode' ) ??\n\t\t'visual'\n);\n\n/**\n * Returns true if the editor sidebar is opened.\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether the editor sidebar is opened.\n */\nexport const isEditorSidebarOpened = createRegistrySelector(\n\t( select ) => () => {\n\t\tconst activeGeneralSidebar =\n\t\t\tselect( interfaceStore ).getActiveComplementaryArea(\n\t\t\t\t'core/edit-post'\n\t\t\t);\n\t\treturn [ 'edit-post/document', 'edit-post/block' ].includes(\n\t\t\tactiveGeneralSidebar\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the plugin sidebar is opened.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the plugin sidebar is opened.\n */\nexport const isPluginSidebarOpened = createRegistrySelector(\n\t( select ) => () => {\n\t\tconst activeGeneralSidebar =\n\t\t\tselect( interfaceStore ).getActiveComplementaryArea(\n\t\t\t\t'core/edit-post'\n\t\t\t);\n\t\treturn (\n\t\t\t!! activeGeneralSidebar &&\n\t\t\t! [ 'edit-post/document', 'edit-post/block' ].includes(\n\t\t\t\tactiveGeneralSidebar\n\t\t\t)\n\t\t);\n\t}\n);\n\n/**\n * Returns the current active general sidebar name, or null if there is no\n * general sidebar active. The active general sidebar is a unique name to\n * identify either an editor or plugin sidebar.\n *\n * Examples:\n *\n *  - `edit-post/document`\n *  - `my-plugin/insert-image-sidebar`\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Active general sidebar name.\n */\nexport const getActiveGeneralSidebarName = createRegistrySelector(\n\t( select ) => () => {\n\t\treturn select( interfaceStore ).getActiveComplementaryArea(\n\t\t\t'core/edit-post'\n\t\t);\n\t}\n);\n\n/**\n * Converts panels from the new preferences store format to the old format\n * that the post editor previously used.\n *\n * The resultant converted data should look like this:\n * {\n *     panelName: {\n *         enabled: false,\n *         opened: true,\n *     },\n *     anotherPanelName: {\n *         opened: true\n *     },\n * }\n *\n * @param {string[] | undefined} inactivePanels An array of inactive panel names.\n * @param {string[] | undefined} openPanels     An array of open panel names.\n *\n * @return {Object} The converted panel data.\n */\nfunction convertPanelsToOldFormat( inactivePanels, openPanels ) {\n\t// First reduce the inactive panels.\n\tconst panelsWithEnabledState = inactivePanels?.reduce(\n\t\t( accumulatedPanels, panelName ) => ( {\n\t\t\t...accumulatedPanels,\n\t\t\t[ panelName ]: {\n\t\t\t\tenabled: false,\n\t\t\t},\n\t\t} ),\n\t\t{}\n\t);\n\n\t// Then reduce the open panels, passing in the result of the previous\n\t// reduction as the initial value so that both open and inactive\n\t// panel state is combined.\n\tconst panels = openPanels?.reduce( ( accumulatedPanels, panelName ) => {\n\t\tconst currentPanelState = accumulatedPanels?.[ panelName ];\n\t\treturn {\n\t\t\t...accumulatedPanels,\n\t\t\t[ panelName ]: {\n\t\t\t\t...currentPanelState,\n\t\t\t\topened: true,\n\t\t\t},\n\t\t};\n\t}, panelsWithEnabledState ?? {} );\n\n\t// The panels variable will only be set if openPanels wasn't `undefined`.\n\t// If it isn't set just return `panelsWithEnabledState`, and if that isn't\n\t// set return an empty object.\n\treturn panels ?? panelsWithEnabledState ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the preferences (these preferences are persisted locally).\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Preferences Object.\n */\nexport const getPreferences = createRegistrySelector( ( select ) => () => {\n\tdeprecated( `select( 'core/edit-post' ).getPreferences`, {\n\t\tsince: '6.0',\n\t\talternative: `select( 'core/preferences' ).get`,\n\t} );\n\n\t// These preferences now exist in the preferences store.\n\t// Fetch them so that they can be merged into the post\n\t// editor preferences.\n\tconst preferences = [\n\t\t'hiddenBlockTypes',\n\t\t'editorMode',\n\t\t'preferredStyleVariations',\n\t].reduce( ( accumulatedPrefs, preferenceKey ) => {\n\t\tconst value = select( preferencesStore ).get(\n\t\t\t'core/edit-post',\n\t\t\tpreferenceKey\n\t\t);\n\n\t\treturn {\n\t\t\t...accumulatedPrefs,\n\t\t\t[ preferenceKey ]: value,\n\t\t};\n\t}, {} );\n\n\t// Panels were a preference, but the data structure changed when the state\n\t// was migrated to the preferences store. They need to be converted from\n\t// the new preferences store format to old format to ensure no breaking\n\t// changes for plugins.\n\tconst inactivePanels = select( preferencesStore ).get(\n\t\t'core/edit-post',\n\t\t'inactivePanels'\n\t);\n\tconst openPanels = select( preferencesStore ).get(\n\t\t'core/edit-post',\n\t\t'openPanels'\n\t);\n\tconst panels = convertPanelsToOldFormat( inactivePanels, openPanels );\n\n\treturn {\n\t\t...preferences,\n\t\tpanels,\n\t};\n} );\n\n/**\n *\n * @param {Object} state         Global application state.\n * @param {string} preferenceKey Preference Key.\n * @param {*}      defaultValue  Default Value.\n *\n * @return {*} Preference Value.\n */\nexport function getPreference( state, preferenceKey, defaultValue ) {\n\tdeprecated( `select( 'core/edit-post' ).getPreference`, {\n\t\tsince: '6.0',\n\t\talternative: `select( 'core/preferences' ).get`,\n\t} );\n\n\t// Avoid using the `getPreferences` registry selector where possible.\n\tconst preferences = getPreferences( state );\n\tconst value = preferences[ preferenceKey ];\n\treturn value === undefined ? defaultValue : value;\n}\n\n/**\n * Returns an array of blocks that are hidden.\n *\n * @return {Array} A list of the hidden block types\n */\nexport const getHiddenBlockTypes = createRegistrySelector( ( select ) => () => {\n\treturn (\n\t\tselect( preferencesStore ).get(\n\t\t\t'core/edit-post',\n\t\t\t'hiddenBlockTypes'\n\t\t) ?? EMPTY_ARRAY\n\t);\n} );\n\n/**\n * Returns true if the publish sidebar is opened.\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether the publish sidebar is open.\n */\nexport function isPublishSidebarOpened( state ) {\n\treturn state.publishSidebarActive;\n}\n\n/**\n * Returns true if the given panel was programmatically removed, or false otherwise.\n * All panels are not removed by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is removed.\n */\nexport function isEditorPanelRemoved( state, panelName ) {\n\treturn state.removedPanels.includes( panelName );\n}\n\n/**\n * Returns true if the given panel is enabled, or false otherwise. Panels are\n * enabled by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is enabled.\n */\nexport const isEditorPanelEnabled = createRegistrySelector(\n\t( select ) => ( state, panelName ) => {\n\t\tconst inactivePanels = select( preferencesStore ).get(\n\t\t\t'core/edit-post',\n\t\t\t'inactivePanels'\n\t\t);\n\t\treturn (\n\t\t\t! isEditorPanelRemoved( state, panelName ) &&\n\t\t\t! inactivePanels?.includes( panelName )\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the given panel is open, or false otherwise. Panels are\n * closed by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is open.\n */\nexport const isEditorPanelOpened = createRegistrySelector(\n\t( select ) => ( state, panelName ) => {\n\t\tconst openPanels = select( preferencesStore ).get(\n\t\t\t'core/edit-post',\n\t\t\t'openPanels'\n\t\t);\n\t\treturn !! openPanels?.includes( panelName );\n\t}\n);\n\n/**\n * Returns true if a modal is active, or false otherwise.\n *\n * @param {Object} state     Global application state.\n * @param {string} modalName A string that uniquely identifies the modal.\n *\n * @return {boolean} Whether the modal is active.\n */\nexport function isModalActive( state, modalName ) {\n\treturn state.activeModal === modalName;\n}\n\n/**\n * Returns whether the given feature is enabled or not.\n *\n * @param {Object} state   Global application state.\n * @param {string} feature Feature slug.\n *\n * @return {boolean} Is active.\n */\nexport const isFeatureActive = createRegistrySelector(\n\t( select ) => ( state, feature ) => {\n\t\treturn !! select( preferencesStore ).get( 'core/edit-post', feature );\n\t}\n);\n\n/**\n * Returns true if the plugin item is pinned to the header.\n * When the value is not set it defaults to true.\n *\n * @param {Object} state      Global application state.\n * @param {string} pluginName Plugin item name.\n *\n * @return {boolean} Whether the plugin item is pinned.\n */\nexport const isPluginItemPinned = createRegistrySelector(\n\t( select ) => ( state, pluginName ) => {\n\t\treturn select( interfaceStore ).isItemPinned(\n\t\t\t'core/edit-post',\n\t\t\tpluginName\n\t\t);\n\t}\n);\n\n/**\n * Returns an array of active meta box locations.\n *\n * @param {Object} state Post editor state.\n *\n * @return {string[]} Active meta box locations.\n */\nexport const getActiveMetaBoxLocations = createSelector(\n\t( state ) => {\n\t\treturn Object.keys( state.metaBoxes.locations ).filter( ( location ) =>\n\t\t\tisMetaBoxLocationActive( state, location )\n\t\t);\n\t},\n\t( state ) => [ state.metaBoxes.locations ]\n);\n\n/**\n * Returns true if a metabox location is active and visible\n *\n * @param {Object} state    Post editor state.\n * @param {string} location Meta box location to test.\n *\n * @return {boolean} Whether the meta box location is active and visible.\n */\nexport function isMetaBoxLocationVisible( state, location ) {\n\treturn (\n\t\tisMetaBoxLocationActive( state, location ) &&\n\t\tgetMetaBoxesPerLocation( state, location )?.some( ( { id } ) => {\n\t\t\treturn isEditorPanelEnabled( state, `meta-box-${ id }` );\n\t\t} )\n\t);\n}\n\n/**\n * Returns true if there is an active meta box in the given location, or false\n * otherwise.\n *\n * @param {Object} state    Post editor state.\n * @param {string} location Meta box location to test.\n *\n * @return {boolean} Whether the meta box location is active.\n */\nexport function isMetaBoxLocationActive( state, location ) {\n\tconst metaBoxes = getMetaBoxesPerLocation( state, location );\n\treturn !! metaBoxes && metaBoxes.length !== 0;\n}\n\n/**\n * Returns the list of all the available meta boxes for a given location.\n *\n * @param {Object} state    Global application state.\n * @param {string} location Meta box location to test.\n *\n * @return {?Array} List of meta boxes.\n */\nexport function getMetaBoxesPerLocation( state, location ) {\n\treturn state.metaBoxes.locations[ location ];\n}\n\n/**\n * Returns the list of all the available meta boxes.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} List of meta boxes.\n */\nexport const getAllMetaBoxes = createSelector(\n\t( state ) => {\n\t\treturn Object.values( state.metaBoxes.locations ).flat();\n\t},\n\t( state ) => [ state.metaBoxes.locations ]\n);\n\n/**\n * Returns true if the post is using Meta Boxes\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether there are metaboxes or not.\n */\nexport function hasMetaBoxes( state ) {\n\treturn getActiveMetaBoxLocations( state ).length > 0;\n}\n\n/**\n * Returns true if the Meta Boxes are being saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the metaboxes are being saved.\n */\nexport function isSavingMetaBoxes( state ) {\n\treturn state.metaBoxes.isSaving;\n}\n\n/**\n * Returns the current editing canvas device type.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Device type.\n */\nexport function __experimentalGetPreviewDeviceType( state ) {\n\treturn state.deviceType;\n}\n\n/**\n * Returns true if the inserter is opened.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the inserter is opened.\n */\nexport function isInserterOpened( state ) {\n\treturn !! state.blockInserterPanel;\n}\n\n/**\n * Get the insertion point for the inserter.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The root client ID, index to insert at and starting filter value.\n */\nexport function __experimentalGetInsertionPoint( state ) {\n\tconst { rootClientId, insertionIndex, filterValue } =\n\t\tstate.blockInserterPanel;\n\treturn { rootClientId, insertionIndex, filterValue };\n}\n\n/**\n * Returns true if the list view is opened.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the list view is opened.\n */\nexport function isListViewOpened( state ) {\n\treturn state.listViewPanel;\n}\n\n/**\n * Returns true if the template editing mode is enabled.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether we're editing the template.\n */\nexport function isEditingTemplate( state ) {\n\treturn state.isEditingTemplate;\n}\n\n/**\n * Returns true if meta boxes are initialized.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether meta boxes are initialized.\n */\nexport function areMetaBoxesInitialized( state ) {\n\treturn state.metaBoxes.initialized;\n}\n\n/**\n * Retrieves the template of the currently edited post.\n *\n * @return {Object?} Post Template.\n */\nexport const getEditedPostTemplate = createRegistrySelector(\n\t( select ) => () => {\n\t\tconst currentTemplate =\n\t\t\tselect( editorStore ).getEditedPostAttribute( 'template' );\n\t\tif ( currentTemplate ) {\n\t\t\tconst templateWithSameSlug = select( coreStore )\n\t\t\t\t.getEntityRecords( 'postType', 'wp_template', { per_page: -1 } )\n\t\t\t\t?.find( ( template ) => template.slug === currentTemplate );\n\t\t\tif ( ! templateWithSameSlug ) {\n\t\t\t\treturn templateWithSameSlug;\n\t\t\t}\n\t\t\treturn select( coreStore ).getEditedEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\t'wp_template',\n\t\t\t\ttemplateWithSameSlug.id\n\t\t\t);\n\t\t}\n\n\t\tconst post = select( editorStore ).getCurrentPost();\n\t\tif ( post.link ) {\n\t\t\treturn select( coreStore ).__experimentalGetTemplateForLink(\n\t\t\t\tpost.link\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n);\n"]}