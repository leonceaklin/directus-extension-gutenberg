{"version":3,"sources":["@wordpress/list-reusable-blocks/src/utils/import.js"],"names":["apiFetch","readTextFile","importReusableBlock","file","fileContent","parsedContent","JSON","parse","e","Error","__file","title","content","postType","path","reusableBlock","rest_base","data","status","method"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,QAAP,MAAqB,sBAArB;AAEA;AACA;AACA;;AACA,SAASC,YAAT,QAA6B,QAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,mBAAf,CAAoCC,IAApC,EAA2C;AAC1C,QAAMC,WAAW,GAAG,MAAMH,YAAY,CAAEE,IAAF,CAAtC;AACA,MAAIE,aAAJ;;AACA,MAAI;AACHA,IAAAA,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAYH,WAAZ,CAAhB;AACA,GAFD,CAEE,OAAQI,CAAR,EAAY;AACb,UAAM,IAAIC,KAAJ,CAAW,mBAAX,CAAN;AACA;;AACD,MACCJ,aAAa,CAACK,MAAd,KAAyB,UAAzB,IACA,CAAEL,aAAa,CAACM,KADhB,IAEA,CAAEN,aAAa,CAACO,OAFhB,IAGA,OAAOP,aAAa,CAACM,KAArB,KAA+B,QAH/B,IAIA,OAAON,aAAa,CAACO,OAArB,KAAiC,QALlC,EAME;AACD,UAAM,IAAIH,KAAJ,CAAW,kCAAX,CAAN;AACA;;AACD,QAAMI,QAAQ,GAAG,MAAMb,QAAQ,CAAE;AAAEc,IAAAA,IAAI,EAAG;AAAT,GAAF,CAA/B;AACA,QAAMC,aAAa,GAAG,MAAMf,QAAQ,CAAE;AACrCc,IAAAA,IAAI,EAAG,UAAUD,QAAQ,CAACG,SAAW,EADA;AAErCC,IAAAA,IAAI,EAAE;AACLN,MAAAA,KAAK,EAAEN,aAAa,CAACM,KADhB;AAELC,MAAAA,OAAO,EAAEP,aAAa,CAACO,OAFlB;AAGLM,MAAAA,MAAM,EAAE;AAHH,KAF+B;AAOrCC,IAAAA,MAAM,EAAE;AAP6B,GAAF,CAApC;AAUA,SAAOJ,aAAP;AACA;;AAED,eAAeb,mBAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport { readTextFile } from './file';\n\n/**\n * Import a reusable block from a JSON file.\n *\n * @param {File} file File.\n * @return {Promise} Promise returning the imported reusable block.\n */\nasync function importReusableBlock( file ) {\n\tconst fileContent = await readTextFile( file );\n\tlet parsedContent;\n\ttry {\n\t\tparsedContent = JSON.parse( fileContent );\n\t} catch ( e ) {\n\t\tthrow new Error( 'Invalid JSON file' );\n\t}\n\tif (\n\t\tparsedContent.__file !== 'wp_block' ||\n\t\t! parsedContent.title ||\n\t\t! parsedContent.content ||\n\t\ttypeof parsedContent.title !== 'string' ||\n\t\ttypeof parsedContent.content !== 'string'\n\t) {\n\t\tthrow new Error( 'Invalid Reusable block JSON file' );\n\t}\n\tconst postType = await apiFetch( { path: `/wp/v2/types/wp_block` } );\n\tconst reusableBlock = await apiFetch( {\n\t\tpath: `/wp/v2/${ postType.rest_base }`,\n\t\tdata: {\n\t\t\ttitle: parsedContent.title,\n\t\t\tcontent: parsedContent.content,\n\t\t\tstatus: 'publish',\n\t\t},\n\t\tmethod: 'POST',\n\t} );\n\n\treturn reusableBlock;\n}\n\nexport default importReusableBlock;\n"]}