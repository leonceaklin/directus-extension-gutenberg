"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.link = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _richText = require("@wordpress/rich-text");

var _url = require("@wordpress/url");

var _blockEditor = require("@wordpress/block-editor");

var _htmlEntities = require("@wordpress/html-entities");

var _icons = require("@wordpress/icons");

var _a11y = require("@wordpress/a11y");

var _inline = _interopRequireDefault(require("./inline"));

var _utils = require("./utils");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const name = 'core/link';
const title = (0, _i18n.__)('Link');

function Edit(_ref) {
  let {
    isActive,
    activeAttributes,
    value,
    onChange,
    onFocus,
    contentRef
  } = _ref;
  const [addingLink, setAddingLink] = (0, _element.useState)(false);

  function addLink() {
    const text = (0, _richText.getTextContent)((0, _richText.slice)(value));

    if (text && (0, _url.isURL)(text) && (0, _utils.isValidHref)(text)) {
      onChange((0, _richText.applyFormat)(value, {
        type: name,
        attributes: {
          url: text
        }
      }));
    } else if (text && (0, _url.isEmail)(text)) {
      onChange((0, _richText.applyFormat)(value, {
        type: name,
        attributes: {
          url: `mailto:${text}`
        }
      }));
    } else {
      setAddingLink(true);
    }
  }

  function stopAddingLink() {
    setAddingLink(false);
    onFocus();
  }

  function onRemoveFormat() {
    onChange((0, _richText.removeFormat)(value, name));
    (0, _a11y.speak)((0, _i18n.__)('Link removed.'), 'assertive');
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.RichTextShortcut, {
    type: "primary",
    character: "k",
    onUse: addLink
  }), (0, _element.createElement)(_blockEditor.RichTextShortcut, {
    type: "primaryShift",
    character: "k",
    onUse: onRemoveFormat
  }), isActive && (0, _element.createElement)(_blockEditor.RichTextToolbarButton, {
    name: "link",
    icon: _icons.linkOff,
    title: (0, _i18n.__)('Unlink'),
    onClick: onRemoveFormat,
    isActive: isActive,
    shortcutType: "primaryShift",
    shortcutCharacter: "k"
  }), !isActive && (0, _element.createElement)(_blockEditor.RichTextToolbarButton, {
    name: "link",
    icon: _icons.link,
    title: title,
    onClick: addLink,
    isActive: isActive,
    shortcutType: "primary",
    shortcutCharacter: "k"
  }), (addingLink || isActive) && (0, _element.createElement)(_inline.default, {
    addingLink: addingLink,
    stopAddingLink: stopAddingLink,
    isActive: isActive,
    activeAttributes: activeAttributes,
    value: value,
    onChange: onChange,
    contentRef: contentRef
  }));
}

const link = {
  name,
  title,
  tagName: 'a',
  className: null,
  attributes: {
    url: 'href',
    type: 'data-type',
    id: 'data-id',
    target: 'target'
  },

  __unstablePasteRule(value, _ref2) {
    let {
      html,
      plainText
    } = _ref2;

    if ((0, _richText.isCollapsed)(value)) {
      return value;
    }

    const pastedText = (html || plainText).replace(/<[^>]+>/g, '').trim(); // A URL was pasted, turn the selection into a link.

    if (!(0, _url.isURL)(pastedText)) {
      return value;
    } // Allows us to ask for this information when we get a report.


    window.console.log('Created link:\n\n', pastedText);
    return (0, _richText.applyFormat)(value, {
      type: name,
      attributes: {
        url: (0, _htmlEntities.decodeEntities)(pastedText)
      }
    });
  },

  edit: Edit
};
exports.link = link;
//# sourceMappingURL=index.js.map