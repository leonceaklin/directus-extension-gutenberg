"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _import = _interopRequireDefault(require("../../utils/import"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ImportForm(_ref) {
  let {
    instanceId,
    onUpload
  } = _ref;
  const inputId = 'list-reusable-blocks-import-form-' + instanceId;
  const formRef = (0, _element.useRef)();
  const [isLoading, setIsLoading] = (0, _element.useState)(false);
  const [error, setError] = (0, _element.useState)(null);
  const [file, setFile] = (0, _element.useState)(null);

  const onChangeFile = event => {
    setFile(event.target.files[0]);
    setError(null);
  };

  const onSubmit = event => {
    event.preventDefault();

    if (!file) {
      return;
    }

    setIsLoading({
      isLoading: true
    });
    (0, _import.default)(file).then(reusableBlock => {
      if (!formRef) {
        return;
      }

      setIsLoading(false);
      onUpload(reusableBlock);
    }).catch(errors => {
      if (!formRef) {
        return;
      }

      let uiMessage;

      switch (errors.message) {
        case 'Invalid JSON file':
          uiMessage = (0, _i18n.__)('Invalid JSON file');
          break;

        case 'Invalid Reusable block JSON file':
          uiMessage = (0, _i18n.__)('Invalid Reusable block JSON file');
          break;

        default:
          uiMessage = (0, _i18n.__)('Unknown error');
      }

      setIsLoading(false);
      setError(uiMessage);
    });
  };

  const onDismissError = () => {
    setError(null);
  };

  return (0, _element.createElement)("form", {
    className: "list-reusable-blocks-import-form",
    onSubmit: onSubmit,
    ref: formRef
  }, error && (0, _element.createElement)(_components.Notice, {
    status: "error",
    onRemove: () => onDismissError()
  }, error), (0, _element.createElement)("label", {
    htmlFor: inputId,
    className: "list-reusable-blocks-import-form__label"
  }, (0, _i18n.__)('File')), (0, _element.createElement)("input", {
    id: inputId,
    type: "file",
    onChange: onChangeFile
  }), (0, _element.createElement)(_components.Button, {
    type: "submit",
    isBusy: isLoading,
    disabled: !file || isLoading,
    variant: "secondary",
    className: "list-reusable-blocks-import-form__button"
  }, (0, _i18n._x)('Import', 'button label')));
}

var _default = (0, _compose.withInstanceId)(ImportForm);

exports.default = _default;
//# sourceMappingURL=index.js.map