"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = WidgetTypeSelector;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _blockEditor = require("@wordpress/block-editor");

/**
 * WordPress dependencies
 */
function WidgetTypeSelector(_ref) {
  let {
    selectedId,
    onSelect
  } = _ref;
  const widgetTypes = (0, _data.useSelect)(select => {
    var _select$getSettings$w, _select$getSettings, _select$getWidgetType;

    const hiddenIds = (_select$getSettings$w = (_select$getSettings = select(_blockEditor.store).getSettings()) === null || _select$getSettings === void 0 ? void 0 : _select$getSettings.widgetTypesToHideFromLegacyWidgetBlock) !== null && _select$getSettings$w !== void 0 ? _select$getSettings$w : [];
    return (_select$getWidgetType = select(_coreData.store).getWidgetTypes({
      per_page: -1
    })) === null || _select$getWidgetType === void 0 ? void 0 : _select$getWidgetType.filter(widgetType => !hiddenIds.includes(widgetType.id));
  }, []);

  if (!widgetTypes) {
    return (0, _element.createElement)(_components.Spinner, null);
  }

  if (widgetTypes.length === 0) {
    return (0, _i18n.__)('There are no widgets available.');
  }

  return (0, _element.createElement)(_components.SelectControl, {
    __nextHasNoMarginBottom: true,
    label: (0, _i18n.__)('Select a legacy widget to display:'),
    value: selectedId !== null && selectedId !== void 0 ? selectedId : '',
    options: [{
      value: '',
      label: (0, _i18n.__)('Select widget')
    }, ...widgetTypes.map(widgetType => ({
      value: widgetType.id,
      label: widgetType.name
    }))],
    onChange: value => {
      if (value) {
        const selected = widgetTypes.find(widgetType => widgetType.id === value);
        onSelect({
          selectedId: selected.id,
          isMulti: selected.is_multi
        });
      } else {
        onSelect({
          selectedId: null
        });
      }
    }
  });
}
//# sourceMappingURL=widget-type-selector.js.map