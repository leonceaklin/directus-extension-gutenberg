import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { AutosaveMonitor, LocalAutosaveMonitor, UnsavedChangesWarning, EditorNotices, EditorKeyboardShortcutsRegister, EditorSnackbars, store as editorStore } from '@wordpress/editor';
import { useSelect, useDispatch } from '@wordpress/data';
import { BlockBreadcrumb } from '@wordpress/block-editor';
import { Button, ScrollLock, Popover } from '@wordpress/components';
import { useViewportMatch } from '@wordpress/compose';
import { PluginArea } from '@wordpress/plugins';
import { __, _x, sprintf } from '@wordpress/i18n';
import { ComplementaryArea, FullscreenMode, InterfaceSkeleton, store as interfaceStore } from '@wordpress/interface';
import { useState, useEffect, useCallback } from '@wordpress/element';
import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';
import { store as noticesStore } from '@wordpress/notices';
/**
 * Internal dependencies
 */

import TextEditor from '../text-editor';
import VisualEditor from '../visual-editor';
import EditPostKeyboardShortcuts from '../keyboard-shortcuts';
import KeyboardShortcutHelpModal from '../keyboard-shortcut-help-modal';
import EditPostPreferencesModal from '../preferences-modal';
import BrowserURL from '../browser-url';
import Header from '../header';
import InserterSidebar from '../secondary-sidebar/inserter-sidebar';
import ListViewSidebar from '../secondary-sidebar/list-view-sidebar';
import SettingsSidebar from '../sidebar/settings-sidebar';
import MetaBoxes from '../meta-boxes';
import WelcomeGuide from '../welcome-guide';
import ActionsPanel from './actions-panel';
import StartPageOptions from '../start-page-options';
import { store as editPostStore } from '../../store';
const interfaceLabels = {
  /* translators: accessibility text for the editor top bar landmark region. */
  header: __('Editor top bar'),

  /* translators: accessibility text for the editor content landmark region. */
  body: __('Editor content'),

  /* translators: accessibility text for the editor settings landmark region. */
  sidebar: __('Editor settings'),

  /* translators: accessibility text for the editor publish landmark region. */
  actions: __('Editor publish'),

  /* translators: accessibility text for the editor footer landmark region. */
  footer: __('Editor footer')
};

function Layout(_ref) {
  let {
    styles
  } = _ref;
  const isMobileViewport = useViewportMatch('medium', '<');
  const isHugeViewport = useViewportMatch('huge', '>=');
  const isLargeViewport = useViewportMatch('large');
  const {
    openGeneralSidebar,
    closeGeneralSidebar,
    setIsInserterOpened
  } = useDispatch(editPostStore);
  const {
    createErrorNotice
  } = useDispatch(noticesStore);
  const {
    mode,
    isFullscreenActive,
    isRichEditingEnabled,
    sidebarIsOpened,
    hasActiveMetaboxes,
    hasFixedToolbar,
    previousShortcut,
    nextShortcut,
    hasBlockSelected,
    isInserterOpened,
    isListViewOpened,
    showIconLabels,
    isDistractionFree,
    showBlockBreadcrumbs,
    isTemplateMode,
    documentLabel
  } = useSelect(select => {
    const {
      getEditorSettings,
      getPostTypeLabel
    } = select(editorStore);
    const editorSettings = getEditorSettings();
    const postTypeLabel = getPostTypeLabel();
    return {
      isTemplateMode: select(editPostStore).isEditingTemplate(),
      hasFixedToolbar: select(editPostStore).isFeatureActive('fixedToolbar'),
      sidebarIsOpened: !!(select(interfaceStore).getActiveComplementaryArea(editPostStore.name) || select(editPostStore).isPublishSidebarOpened()),
      isFullscreenActive: select(editPostStore).isFeatureActive('fullscreenMode'),
      isInserterOpened: select(editPostStore).isInserterOpened(),
      isListViewOpened: select(editPostStore).isListViewOpened(),
      mode: select(editPostStore).getEditorMode(),
      isRichEditingEnabled: editorSettings.richEditingEnabled,
      hasActiveMetaboxes: select(editPostStore).hasMetaBoxes(),
      previousShortcut: select(keyboardShortcutsStore).getAllShortcutKeyCombinations('core/edit-post/previous-region'),
      nextShortcut: select(keyboardShortcutsStore).getAllShortcutKeyCombinations('core/edit-post/next-region'),
      showIconLabels: select(editPostStore).isFeatureActive('showIconLabels'),
      isDistractionFree: select(editPostStore).isFeatureActive('distractionFree') && isLargeViewport,
      showBlockBreadcrumbs: select(editPostStore).isFeatureActive('showBlockBreadcrumbs'),
      // translators: Default label for the Document in the Block Breadcrumb.
      documentLabel: postTypeLabel || _x('Document', 'noun')
    };
  }, []);
  const className = classnames('edit-post-layout', 'is-mode-' + mode, {
    'is-sidebar-opened': sidebarIsOpened,
    'has-fixed-toolbar': hasFixedToolbar,
    'has-metaboxes': hasActiveMetaboxes,
    'show-icon-labels': showIconLabels,
    'is-distraction-free': isDistractionFree
  });

  const openSidebarPanel = () => openGeneralSidebar(hasBlockSelected ? 'edit-post/block' : 'edit-post/document'); // Inserter and Sidebars are mutually exclusive


  useEffect(() => {
    if (sidebarIsOpened && !isHugeViewport) {
      setIsInserterOpened(false);
    }
  }, [sidebarIsOpened, isHugeViewport]);
  useEffect(() => {
    if (isInserterOpened && !isHugeViewport) {
      closeGeneralSidebar();
    }
  }, [isInserterOpened, isHugeViewport]); // Local state for save panel.
  // Note 'truthy' callback implies an open panel.

  const [entitiesSavedStatesCallback, setEntitiesSavedStatesCallback] = useState(false);
  const closeEntitiesSavedStates = useCallback(arg => {
    if (typeof entitiesSavedStatesCallback === 'function') {
      entitiesSavedStatesCallback(arg);
    }

    setEntitiesSavedStatesCallback(false);
  }, [entitiesSavedStatesCallback]);
  const secondarySidebarLabel = isListViewOpened ? __('Document Overview') : __('Block Library');

  const secondarySidebar = () => {
    if (mode === 'visual' && isInserterOpened) {
      return createElement(InserterSidebar, null);
    }

    if (mode === 'visual' && isListViewOpened) {
      return createElement(ListViewSidebar, null);
    }

    return null;
  };

  function onPluginAreaError(name) {
    createErrorNotice(sprintf(
    /* translators: %s: plugin name */
    __('The "%s" plugin has encountered an error and cannot be rendered.'), name));
  }

  return createElement(Fragment, null, createElement(FullscreenMode, {
    isActive: isFullscreenActive
  }), createElement(BrowserURL, null), createElement(UnsavedChangesWarning, null), createElement(AutosaveMonitor, null), createElement(LocalAutosaveMonitor, null), createElement(EditPostKeyboardShortcuts, null), createElement(EditorKeyboardShortcutsRegister, null), createElement(SettingsSidebar, null), createElement(InterfaceSkeleton, {
    isDistractionFree: isDistractionFree,
    className: className,
    labels: { ...interfaceLabels,
      secondarySidebar: secondarySidebarLabel
    },
    header: createElement(Header, {
      setEntitiesSavedStatesCallback: setEntitiesSavedStatesCallback
    }),
    editorNotices: createElement(EditorNotices, null),
    secondarySidebar: secondarySidebar(),
    sidebar: (!isMobileViewport || sidebarIsOpened) && createElement(Fragment, null, !isMobileViewport && !sidebarIsOpened && createElement("div", {
      className: "edit-post-layout__toggle-sidebar-panel"
    }, createElement(Button, {
      variant: "secondary",
      className: "edit-post-layout__toggle-sidebar-panel-button",
      onClick: openSidebarPanel,
      "aria-expanded": false
    }, hasBlockSelected ? __('Open block settings') : __('Open document settings'))), createElement(ComplementaryArea.Slot, {
      scope: "core/edit-post"
    })),
    notices: createElement(EditorSnackbars, null),
    content: createElement(Fragment, null, !isDistractionFree && createElement(EditorNotices, null), (mode === 'text' || !isRichEditingEnabled) && createElement(TextEditor, null), isRichEditingEnabled && mode === 'visual' && createElement(VisualEditor, {
      styles: styles
    }), !isTemplateMode && createElement("div", {
      className: "edit-post-layout__metaboxes"
    }, createElement(MetaBoxes, {
      location: "normal"
    }), createElement(MetaBoxes, {
      location: "advanced"
    })), isMobileViewport && sidebarIsOpened && createElement(ScrollLock, null)),
    footer: !isDistractionFree && showBlockBreadcrumbs && !isMobileViewport && isRichEditingEnabled && mode === 'visual' && createElement("div", {
      className: "edit-post-layout__footer"
    }, createElement(BlockBreadcrumb, {
      rootLabelText: documentLabel
    })),
    actions: createElement(ActionsPanel, {
      closeEntitiesSavedStates: closeEntitiesSavedStates,
      isEntitiesSavedStatesOpen: entitiesSavedStatesCallback,
      setEntitiesSavedStatesCallback: setEntitiesSavedStatesCallback
    }),
    shortcuts: {
      previous: previousShortcut,
      next: nextShortcut
    }
  }), createElement(EditPostPreferencesModal, null), createElement(KeyboardShortcutHelpModal, null), createElement(WelcomeGuide, null), createElement(StartPageOptions, null), createElement(Popover.Slot, null), createElement(PluginArea, {
    onError: onPluginAreaError
  }));
}

export default Layout;
//# sourceMappingURL=index.js.map