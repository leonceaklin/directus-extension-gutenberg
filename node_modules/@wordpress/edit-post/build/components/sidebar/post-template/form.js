"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostTemplateForm;

var _element = require("@wordpress/element");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _editor = require("@wordpress/editor");

var _coreData = require("@wordpress/core-data");

var _store = require("../../../store");

var _createModal = _interopRequireDefault(require("./create-modal"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function PostTemplateForm(_ref) {
  var _options$find, _selectedOption$value;

  let {
    onClose
  } = _ref;
  const {
    isPostsPage,
    availableTemplates,
    fetchedTemplates,
    selectedTemplateSlug,
    canCreate,
    canEdit
  } = (0, _data.useSelect)(select => {
    const {
      canUser,
      getEntityRecord,
      getEntityRecords
    } = select(_coreData.store);
    const editorSettings = select(_editor.store).getEditorSettings();
    const siteSettings = canUser('read', 'settings') ? getEntityRecord('root', 'site') : undefined;

    const _isPostsPage = select(_editor.store).getCurrentPostId() === (siteSettings === null || siteSettings === void 0 ? void 0 : siteSettings.page_for_posts);

    const canCreateTemplates = canUser('create', 'templates');
    return {
      isPostsPage: _isPostsPage,
      availableTemplates: editorSettings.availableTemplates,
      fetchedTemplates: canCreateTemplates ? getEntityRecords('postType', 'wp_template', {
        post_type: select(_editor.store).getCurrentPostType(),
        per_page: -1
      }) : undefined,
      selectedTemplateSlug: select(_editor.store).getEditedPostAttribute('template'),
      canCreate: canCreateTemplates && !_isPostsPage && editorSettings.supportsTemplateMode,
      canEdit: canCreateTemplates && editorSettings.supportsTemplateMode && !!select(_store.store).getEditedPostTemplate()
    };
  }, []);
  const options = (0, _element.useMemo)(() => Object.entries({ ...availableTemplates,
    ...Object.fromEntries((fetchedTemplates !== null && fetchedTemplates !== void 0 ? fetchedTemplates : []).map(_ref2 => {
      let {
        slug,
        title
      } = _ref2;
      return [slug, title.rendered];
    }))
  }).map(_ref3 => {
    let [slug, title] = _ref3;
    return {
      value: slug,
      label: title
    };
  }), [availableTemplates, fetchedTemplates]);
  const selectedOption = (_options$find = options.find(option => option.value === selectedTemplateSlug)) !== null && _options$find !== void 0 ? _options$find : options.find(option => !option.value); // The default option has '' value.

  const {
    editPost
  } = (0, _data.useDispatch)(_editor.store);
  const {
    __unstableSwitchToTemplateMode
  } = (0, _data.useDispatch)(_store.store);
  const [isCreateModalOpen, setIsCreateModalOpen] = (0, _element.useState)(false);
  return (0, _element.createElement)("div", {
    className: "edit-post-post-template__form"
  }, (0, _element.createElement)(_blockEditor.__experimentalInspectorPopoverHeader, {
    title: (0, _i18n.__)('Template'),
    help: (0, _i18n.__)('Templates define the way content is displayed when viewing your site.'),
    actions: canCreate ? [{
      icon: _icons.addTemplate,
      label: (0, _i18n.__)('Add template'),
      onClick: () => setIsCreateModalOpen(true)
    }] : [],
    onClose: onClose
  }), isPostsPage ? (0, _element.createElement)(_components.Notice, {
    className: "edit-post-post-template__notice",
    status: "warning",
    isDismissible: false
  }, (0, _i18n.__)('The posts page template cannot be changed.')) : (0, _element.createElement)(_components.SelectControl, {
    hideLabelFromVision: true,
    label: (0, _i18n.__)('Template'),
    value: (_selectedOption$value = selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value) !== null && _selectedOption$value !== void 0 ? _selectedOption$value : '',
    options: options,
    onChange: slug => editPost({
      template: slug || ''
    })
  }), canEdit && (0, _element.createElement)("p", null, (0, _element.createElement)(_components.Button, {
    variant: "link",
    onClick: () => __unstableSwitchToTemplateMode()
  }, (0, _i18n.__)('Edit template'))), isCreateModalOpen && (0, _element.createElement)(_createModal.default, {
    onClose: () => setIsCreateModalOpen(false)
  }));
}
//# sourceMappingURL=form.js.map