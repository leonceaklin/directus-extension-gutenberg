"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _blocks = require("@wordpress/blocks");

/**
 * WordPress dependencies
 */
const legacyWidgetTransforms = [{
  block: 'core/calendar',
  widget: 'calendar'
}, {
  block: 'core/search',
  widget: 'search'
}, {
  block: 'core/html',
  widget: 'custom_html',
  transform: _ref => {
    let {
      content
    } = _ref;
    return {
      content
    };
  }
}, {
  block: 'core/archives',
  widget: 'archives',
  transform: _ref2 => {
    let {
      count,
      dropdown
    } = _ref2;
    return {
      displayAsDropdown: !!dropdown,
      showPostCounts: !!count
    };
  }
}, {
  block: 'core/latest-posts',
  widget: 'recent-posts',
  transform: _ref3 => {
    let {
      show_date: displayPostDate,
      number
    } = _ref3;
    return {
      displayPostDate: !!displayPostDate,
      postsToShow: number
    };
  }
}, {
  block: 'core/latest-comments',
  widget: 'recent-comments',
  transform: _ref4 => {
    let {
      number
    } = _ref4;
    return {
      commentsToShow: number
    };
  }
}, {
  block: 'core/tag-cloud',
  widget: 'tag_cloud',
  transform: _ref5 => {
    let {
      taxonomy,
      count
    } = _ref5;
    return {
      showTagCounts: !!count,
      taxonomy
    };
  }
}, {
  block: 'core/categories',
  widget: 'categories',
  transform: _ref6 => {
    let {
      count,
      dropdown,
      hierarchical
    } = _ref6;
    return {
      displayAsDropdown: !!dropdown,
      showPostCounts: !!count,
      showHierarchy: !!hierarchical
    };
  }
}, {
  block: 'core/audio',
  widget: 'media_audio',
  transform: _ref7 => {
    let {
      url,
      preload,
      loop,
      attachment_id: id
    } = _ref7;
    return {
      src: url,
      id,
      preload,
      loop
    };
  }
}, {
  block: 'core/video',
  widget: 'media_video',
  transform: _ref8 => {
    let {
      url,
      preload,
      loop,
      attachment_id: id
    } = _ref8;
    return {
      src: url,
      id,
      preload,
      loop
    };
  }
}, {
  block: 'core/image',
  widget: 'media_image',
  transform: _ref9 => {
    let {
      alt,
      attachment_id: id,
      caption,
      height,
      link_classes: linkClass,
      link_rel: rel,
      link_target_blank: targetBlack,
      link_type: linkDestination,
      link_url: link,
      size: sizeSlug,
      url,
      width
    } = _ref9;
    return {
      alt,
      caption,
      height,
      id,
      link,
      linkClass,
      linkDestination,
      linkTarget: targetBlack ? '_blank' : undefined,
      rel,
      sizeSlug,
      url,
      width
    };
  }
}, {
  block: 'core/gallery',
  widget: 'media_gallery',
  transform: _ref10 => {
    let {
      ids,
      link_type: linkTo,
      size,
      number
    } = _ref10;
    return {
      ids,
      columns: number,
      linkTo,
      sizeSlug: size,
      images: ids.map(id => ({
        id
      }))
    };
  }
}, {
  block: 'core/rss',
  widget: 'rss',
  transform: _ref11 => {
    let {
      url,
      show_author: displayAuthor,
      show_date: displayDate,
      show_summary: displayExcerpt,
      items
    } = _ref11;
    return {
      feedURL: url,
      displayAuthor: !!displayAuthor,
      displayDate: !!displayDate,
      displayExcerpt: !!displayExcerpt,
      itemsToShow: items
    };
  }
}].map(_ref12 => {
  let {
    block,
    widget,
    transform
  } = _ref12;
  return {
    type: 'block',
    blocks: [block],
    isMatch: _ref13 => {
      let {
        idBase,
        instance
      } = _ref13;
      return idBase === widget && !!(instance !== null && instance !== void 0 && instance.raw);
    },
    transform: _ref14 => {
      var _instance$raw;

      let {
        instance
      } = _ref14;
      const transformedBlock = (0, _blocks.createBlock)(block, transform ? transform(instance.raw) : undefined);

      if (!((_instance$raw = instance.raw) !== null && _instance$raw !== void 0 && _instance$raw.title)) {
        return transformedBlock;
      }

      return [(0, _blocks.createBlock)('core/heading', {
        content: instance.raw.title
      }), transformedBlock];
    }
  };
});
const transforms = {
  to: legacyWidgetTransforms
};
var _default = transforms;
exports.default = _default;
//# sourceMappingURL=transforms.js.map