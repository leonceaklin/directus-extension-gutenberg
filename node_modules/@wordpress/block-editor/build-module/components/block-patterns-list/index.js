import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { VisuallyHidden, __unstableComposite as Composite, __unstableUseCompositeState as useCompositeState, __unstableCompositeItem as CompositeItem, Tooltip } from '@wordpress/components';
import { useInstanceId } from '@wordpress/compose';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import BlockPreview from '../block-preview';
import InserterDraggableBlocks from '../inserter-draggable-blocks';

const WithToolTip = _ref => {
  let {
    showTooltip,
    title,
    children
  } = _ref;

  if (showTooltip) {
    return createElement(Tooltip, {
      text: title
    }, children);
  }

  return createElement(Fragment, null, children);
};

function BlockPattern(_ref2) {
  let {
    isDraggable,
    pattern,
    onClick,
    composite,
    showTooltip
  } = _ref2;
  const {
    blocks,
    viewportWidth
  } = pattern;
  const instanceId = useInstanceId(BlockPattern);
  const descriptionId = `block-editor-block-patterns-list__item-description-${instanceId}`;
  return createElement(InserterDraggableBlocks, {
    isEnabled: isDraggable,
    blocks: blocks,
    isPattern: !!pattern
  }, _ref3 => {
    let {
      draggable,
      onDragStart,
      onDragEnd
    } = _ref3;
    return createElement("div", {
      className: "block-editor-block-patterns-list__list-item",
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd
    }, createElement(WithToolTip, {
      showTooltip: showTooltip,
      title: pattern.title
    }, createElement(CompositeItem, _extends({
      role: "option",
      as: "div"
    }, composite, {
      className: "block-editor-block-patterns-list__item",
      onClick: () => onClick(pattern, blocks),
      "aria-label": pattern.title,
      "aria-describedby": pattern.description ? descriptionId : undefined
    }), createElement(BlockPreview, {
      blocks: blocks,
      viewportWidth: viewportWidth
    }), !showTooltip && createElement("div", {
      className: "block-editor-block-patterns-list__item-title"
    }, pattern.title), !!pattern.description && createElement(VisuallyHidden, {
      id: descriptionId
    }, pattern.description))));
  });
}

function BlockPatternPlaceholder() {
  return createElement("div", {
    className: "block-editor-block-patterns-list__item is-placeholder"
  });
}

function BlockPatternList(_ref4) {
  let {
    isDraggable,
    blockPatterns,
    shownPatterns,
    onClickPattern,
    orientation,
    label = __('Block Patterns'),
    showTitlesAsTooltip
  } = _ref4;
  const composite = useCompositeState({
    orientation
  });
  return createElement(Composite, _extends({}, composite, {
    role: "listbox",
    className: "block-editor-block-patterns-list",
    "aria-label": label
  }), blockPatterns.map(pattern => {
    const isShown = shownPatterns.includes(pattern);
    return isShown ? createElement(BlockPattern, {
      key: pattern.name,
      pattern: pattern,
      onClick: onClickPattern,
      isDraggable: isDraggable,
      composite: composite,
      showTooltip: showTitlesAsTooltip
    }) : createElement(BlockPatternPlaceholder, {
      key: pattern.name
    });
  }));
}

export default BlockPatternList;
//# sourceMappingURL=index.js.map