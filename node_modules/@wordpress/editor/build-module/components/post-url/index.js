import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useSelect, useDispatch } from '@wordpress/data';
import { safeDecodeURIComponent, cleanForSlug } from '@wordpress/url';
import { useState } from '@wordpress/element';
import { __experimentalInspectorPopoverHeader as InspectorPopoverHeader } from '@wordpress/block-editor';
import { __ } from '@wordpress/i18n';
import { TextControl, ExternalLink } from '@wordpress/components';
import { store as coreStore } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import { store as editorStore } from '../../store';
export default function PostURL(_ref) {
  let {
    onClose
  } = _ref;
  const {
    isEditable,
    postSlug,
    viewPostLabel,
    postLink,
    permalinkPrefix,
    permalinkSuffix
  } = useSelect(select => {
    var _post$_links$wpActio, _post$_links;

    const post = select(editorStore).getCurrentPost();
    const postTypeSlug = select(editorStore).getCurrentPostType();
    const postType = select(coreStore).getPostType(postTypeSlug);
    const permalinkParts = select(editorStore).getPermalinkParts();
    const hasPublishAction = (_post$_links$wpActio = post === null || post === void 0 ? void 0 : (_post$_links = post._links) === null || _post$_links === void 0 ? void 0 : _post$_links['wp:action-publish']) !== null && _post$_links$wpActio !== void 0 ? _post$_links$wpActio : false;
    return {
      isEditable: select(editorStore).isPermalinkEditable() && hasPublishAction,
      postSlug: safeDecodeURIComponent(select(editorStore).getEditedPostSlug()),
      viewPostLabel: postType === null || postType === void 0 ? void 0 : postType.labels.view_item,
      postLink: post.link,
      permalinkPrefix: permalinkParts === null || permalinkParts === void 0 ? void 0 : permalinkParts.prefix,
      permalinkSuffix: permalinkParts === null || permalinkParts === void 0 ? void 0 : permalinkParts.suffix
    };
  }, []);
  const {
    editPost
  } = useDispatch(editorStore);
  const [forceEmptyField, setForceEmptyField] = useState(false);
  return createElement("div", {
    className: "editor-post-url"
  }, createElement(InspectorPopoverHeader, {
    title: __('URL'),
    onClose: onClose
  }), isEditable && createElement(TextControl, {
    label: __('Permalink'),
    value: forceEmptyField ? '' : postSlug,
    autoComplete: "off",
    spellCheck: "false",
    help: createElement(Fragment, null, __('The last part of the URL.'), ' ', createElement(ExternalLink, {
      href: __('https://wordpress.org/support/article/settings-sidebar/#permalink')
    }, __('Learn more.'))),
    onChange: newValue => {
      editPost({
        slug: newValue
      }); // When we delete the field the permalink gets
      // reverted to the original value.
      // The forceEmptyField logic allows the user to have
      // the field temporarily empty while typing.

      if (!newValue) {
        if (!forceEmptyField) {
          setForceEmptyField(true);
        }

        return;
      }

      if (forceEmptyField) {
        setForceEmptyField(false);
      }
    },
    onBlur: event => {
      editPost({
        slug: cleanForSlug(event.target.value)
      });

      if (forceEmptyField) {
        setForceEmptyField(false);
      }
    }
  }), isEditable && createElement("h3", {
    className: "editor-post-url__link-label"
  }, viewPostLabel !== null && viewPostLabel !== void 0 ? viewPostLabel : __('View post')), createElement("p", null, createElement(ExternalLink, {
    className: "editor-post-url__link",
    href: postLink,
    target: "_blank"
  }, isEditable ? createElement(Fragment, null, createElement("span", {
    className: "editor-post-url__link-prefix"
  }, permalinkPrefix), createElement("span", {
    className: "editor-post-url__link-slug"
  }, postSlug), createElement("span", {
    className: "editor-post-url__link-suffix"
  }, permalinkSuffix)) : postLink)));
}
//# sourceMappingURL=index.js.map