"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Edit;

var _element = require("@wordpress/element");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

/**
 * WordPress dependencies
 */
function Edit(props) {
  const {
    clientId
  } = props;
  const {
    innerBlocks
  } = (0, _data.useSelect)(select => select(_blockEditor.store).getBlock(clientId), [clientId]);
  return (0, _element.createElement)("div", (0, _blockEditor.useBlockProps)({
    className: 'widget'
  }), innerBlocks.length === 0 ? (0, _element.createElement)(PlaceholderContent, props) : (0, _element.createElement)(PreviewContent, props));
}

function PlaceholderContent(_ref) {
  let {
    clientId
  } = _ref;
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.Placeholder, {
    className: "wp-block-widget-group__placeholder",
    icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
      icon: _icons.group
    }),
    label: (0, _i18n.__)('Widget Group')
  }, (0, _element.createElement)(_blockEditor.ButtonBlockAppender, {
    rootClientId: clientId
  })), (0, _element.createElement)(_blockEditor.InnerBlocks, {
    renderAppender: false
  }));
}

function PreviewContent(_ref2) {
  var _attributes$title;

  let {
    attributes,
    setAttributes
  } = _ref2;
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.RichText, {
    tagName: "h2",
    className: "widget-title",
    allowedFormats: [],
    placeholder: (0, _i18n.__)('Title'),
    value: (_attributes$title = attributes.title) !== null && _attributes$title !== void 0 ? _attributes$title : '',
    onChange: title => setAttributes({
      title
    })
  }), (0, _element.createElement)(_blockEditor.InnerBlocks, null));
}
//# sourceMappingURL=edit.js.map