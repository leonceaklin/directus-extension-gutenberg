import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __, sprintf } from '@wordpress/i18n';
import { useSelect, useDispatch } from '@wordpress/data';
import { Dropdown, Button, __experimentalText as Text } from '@wordpress/components';
import { chevronDown } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import { store as editPostStore } from '../../../store';
import { store as blockEditorStore } from '@wordpress/block-editor';
import { store as editorStore } from '@wordpress/editor';
import DeleteTemplate from './delete-template';
import EditTemplateTitle from './edit-template-title';
import TemplateDescription from './template-description';

function TemplateTitle() {
  const {
    template,
    isEditing,
    title
  } = useSelect(select => {
    const {
      isEditingTemplate,
      getEditedPostTemplate
    } = select(editPostStore);
    const {
      getEditedPostAttribute
    } = select(editorStore);

    const _isEditing = isEditingTemplate();

    return {
      template: _isEditing ? getEditedPostTemplate() : null,
      isEditing: _isEditing,
      title: getEditedPostAttribute('title') ? getEditedPostAttribute('title') : __('Untitled')
    };
  }, []);
  const {
    clearSelectedBlock
  } = useDispatch(blockEditorStore);
  const {
    setIsEditingTemplate
  } = useDispatch(editPostStore);

  if (!isEditing || !template) {
    return null;
  }

  let templateTitle = __('Default');

  if (template !== null && template !== void 0 && template.title) {
    templateTitle = template.title;
  } else if (!!template) {
    templateTitle = template.slug;
  }

  const hasOptions = !!(template.custom || template.wp_id || template.description);
  return createElement("div", {
    className: "edit-post-template-top-area"
  }, createElement(Button, {
    className: "edit-post-template-post-title",
    isLink: true,
    showTooltip: true,
    label: sprintf(
    /* translators: %s: Title of the referring post, e.g: "Hello World!" */
    __('Edit %s'), title),
    onClick: () => {
      clearSelectedBlock();
      setIsEditingTemplate(false);
    }
  }, title), hasOptions ? createElement(Dropdown, {
    position: "bottom center",
    contentClassName: "edit-post-template-top-area__popover",
    renderToggle: _ref => {
      let {
        onToggle
      } = _ref;
      return createElement(Button, {
        className: "edit-post-template-title",
        isLink: true,
        icon: chevronDown,
        showTooltip: true,
        onClick: onToggle,
        label: __('Template Options')
      }, templateTitle);
    },
    renderContent: () => createElement(Fragment, null, createElement(EditTemplateTitle, null), createElement(TemplateDescription, null), createElement(DeleteTemplate, null))
  }) : createElement(Text, {
    className: "edit-post-template-title",
    size: "body",
    style: {
      lineHeight: '24px'
    }
  }, templateTitle));
}

export default TemplateTitle;
//# sourceMappingURL=index.js.map