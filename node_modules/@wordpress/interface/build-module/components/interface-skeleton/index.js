import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { forwardRef, useEffect } from '@wordpress/element';
import { __unstableUseNavigateRegions as useNavigateRegions, __unstableMotion as motion } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useMergeRefs } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import NavigableRegion from '../navigable-region';

function useHTMLClass(className) {
  useEffect(() => {
    const element = document && document.querySelector(`html:not(.${className})`);

    if (!element) {
      return;
    }

    element.classList.toggle(className);
    return () => {
      element.classList.toggle(className);
    };
  }, [className]);
}

function InterfaceSkeleton(_ref, ref) {
  let {
    isDistractionFree,
    footer,
    header,
    editorNotices,
    sidebar,
    secondarySidebar,
    notices,
    content,
    actions,
    labels,
    className,
    enableRegionNavigation = true,
    // Todo: does this need to be a prop.
    // Can we use a dependency to keyboard-shortcuts directly?
    shortcuts
  } = _ref;
  const navigateRegionsProps = useNavigateRegions(shortcuts);
  useHTMLClass('interface-interface-skeleton__html-container');
  const defaultLabels = {
    /* translators: accessibility text for the top bar landmark region. */
    header: __('Header'),

    /* translators: accessibility text for the content landmark region. */
    body: __('Content'),

    /* translators: accessibility text for the secondary sidebar landmark region. */
    secondarySidebar: __('Block Library'),

    /* translators: accessibility text for the settings landmark region. */
    sidebar: __('Settings'),

    /* translators: accessibility text for the publish landmark region. */
    actions: __('Publish'),

    /* translators: accessibility text for the footer landmark region. */
    footer: __('Footer')
  };
  const mergedLabels = { ...defaultLabels,
    ...labels
  };
  const headerVariants = {
    hidden: isDistractionFree ? {
      opacity: 0
    } : {
      opacity: 1
    },
    hover: {
      opacity: 1,
      transition: {
        type: 'tween',
        delay: 0.2,
        delayChildren: 0.2
      }
    }
  };
  return createElement("div", _extends({}, enableRegionNavigation ? navigateRegionsProps : {}, {
    ref: useMergeRefs([ref, enableRegionNavigation ? navigateRegionsProps.ref : undefined]),
    className: classnames(className, 'interface-interface-skeleton', navigateRegionsProps.className, !!footer && 'has-footer')
  }), createElement("div", {
    className: "interface-interface-skeleton__editor"
  }, !!header && isDistractionFree && createElement(NavigableRegion, {
    as: motion.div,
    className: "interface-interface-skeleton__header",
    "aria-label": mergedLabels.header,
    initial: isDistractionFree ? 'hidden' : 'hover',
    whileHover: "hover",
    variants: headerVariants,
    transition: {
      type: 'tween',
      delay: 0.8
    }
  }, header), !!header && !isDistractionFree && createElement(NavigableRegion, {
    className: "interface-interface-skeleton__header",
    ariaLabel: mergedLabels.header
  }, header), isDistractionFree && createElement("div", {
    className: "interface-interface-skeleton__header"
  }, editorNotices), createElement("div", {
    className: "interface-interface-skeleton__body"
  }, !!secondarySidebar && createElement(NavigableRegion, {
    className: "interface-interface-skeleton__secondary-sidebar",
    ariaLabel: mergedLabels.secondarySidebar
  }, secondarySidebar), !!notices && createElement("div", {
    className: "interface-interface-skeleton__notices"
  }, notices), createElement(NavigableRegion, {
    className: "interface-interface-skeleton__content",
    ariaLabel: mergedLabels.body
  }, content), !!sidebar && createElement(NavigableRegion, {
    className: "interface-interface-skeleton__sidebar",
    ariaLabel: mergedLabels.sidebar
  }, sidebar), !!actions && createElement(NavigableRegion, {
    className: "interface-interface-skeleton__actions",
    ariaLabel: mergedLabels.actions
  }, actions))), !!footer && createElement(NavigableRegion, {
    className: "interface-interface-skeleton__footer",
    ariaLabel: mergedLabels.footer
  }, footer));
}

export default forwardRef(InterfaceSkeleton);
//# sourceMappingURL=index.js.map