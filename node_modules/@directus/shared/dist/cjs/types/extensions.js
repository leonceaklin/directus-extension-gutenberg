"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionManifest = exports.ExtensionOptionsBundleEntries = exports.ExtensionOptionsBundleEntry = void 0;
const constants_1 = require("../constants");
const zod_1 = require("zod");
const SplitEntrypoint = zod_1.z.object({
    app: zod_1.z.string(),
    api: zod_1.z.string(),
});
exports.ExtensionOptionsBundleEntry = zod_1.z.union([
    zod_1.z.object({
        type: zod_1.z.union([zod_1.z.enum(constants_1.APP_EXTENSION_TYPES), zod_1.z.enum(constants_1.API_EXTENSION_TYPES)]),
        name: zod_1.z.string(),
        source: zod_1.z.string(),
    }),
    zod_1.z.object({
        type: zod_1.z.enum(constants_1.HYBRID_EXTENSION_TYPES),
        name: zod_1.z.string(),
        source: SplitEntrypoint,
    }),
]);
const ExtensionOptionsBase = zod_1.z.object({
    host: zod_1.z.string(),
    hidden: zod_1.z.boolean().optional(),
});
const ExtensionOptionsAppOrApi = zod_1.z.object({
    type: zod_1.z.union([zod_1.z.enum(constants_1.APP_EXTENSION_TYPES), zod_1.z.enum(constants_1.API_EXTENSION_TYPES)]),
    path: zod_1.z.string(),
    source: zod_1.z.string(),
});
const ExtensionOptionsHybrid = zod_1.z.object({
    type: zod_1.z.enum(constants_1.HYBRID_EXTENSION_TYPES),
    path: SplitEntrypoint,
    source: SplitEntrypoint,
});
const ExtensionOptionsBundle = zod_1.z.object({
    type: zod_1.z.literal('bundle'),
    path: SplitEntrypoint,
    entries: zod_1.z.array(exports.ExtensionOptionsBundleEntry),
});
const ExtensionOptions = ExtensionOptionsBase.and(zod_1.z.union([ExtensionOptionsAppOrApi, ExtensionOptionsHybrid, ExtensionOptionsBundle]));
exports.ExtensionOptionsBundleEntries = zod_1.z.array(exports.ExtensionOptionsBundleEntry);
exports.ExtensionManifest = zod_1.z.object({
    name: zod_1.z.string(),
    version: zod_1.z.string(),
    dependencies: zod_1.z.record(zod_1.z.string()).optional(),
    [constants_1.EXTENSION_PKG_KEY]: ExtensionOptions,
});
