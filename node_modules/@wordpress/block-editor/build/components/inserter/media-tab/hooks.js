"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMediaCategories = useMediaCategories;
exports.useMediaResults = useMediaResults;

var _i18n = require("@wordpress/i18n");

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _store = require("../../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function useMediaResults() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const [results, setResults] = (0, _element.useState)();
  const settings = (0, _data.useSelect)(select => select(_store.store).getSettings(), []);
  (0, _element.useEffect)(() => {
    (async () => {
      setResults();

      const _media = await (settings === null || settings === void 0 ? void 0 : settings.__unstableFetchMedia(options));

      if (_media) setResults(_media);
    })();
  }, Object.values(options));
  return results;
}

const MEDIA_CATEGORIES = [{
  label: (0, _i18n.__)('Images'),
  name: 'images',
  mediaType: 'image'
}, {
  label: (0, _i18n.__)('Videos'),
  name: 'videos',
  mediaType: 'video'
}, {
  label: (0, _i18n.__)('Audio'),
  name: 'audio',
  mediaType: 'audio'
}];

function useMediaCategories(rootClientId) {
  const [categories, setCategories] = (0, _element.useState)([]);
  const {
    canInsertImage,
    canInsertVideo,
    canInsertAudio,
    fetchMedia
  } = (0, _data.useSelect)(select => {
    const {
      canInsertBlockType,
      getSettings
    } = select(_store.store);
    return {
      fetchMedia: getSettings().__unstableFetchMedia,
      canInsertImage: canInsertBlockType('core/image', rootClientId),
      canInsertVideo: canInsertBlockType('core/video', rootClientId),
      canInsertAudio: canInsertBlockType('core/audio', rootClientId)
    };
  }, [rootClientId]);
  (0, _element.useEffect)(() => {
    (async () => {
      var _image$value, _video$value, _audio$value;

      // If `__unstableFetchMedia` is not defined in block
      // editor settings, do not set any media categories.
      if (!fetchMedia) return;
      const query = {
        context: 'view',
        per_page: 1,
        _fields: ['id']
      };
      const [image, video, audio] = await Promise.allSettled([fetchMedia({ ...query,
        media_type: 'image'
      }), fetchMedia({ ...query,
        media_type: 'video'
      }), fetchMedia({ ...query,
        media_type: 'audio'
      })]); // The `value` property is only present if the promise's status is "fulfilled".

      const showImage = canInsertImage && !!((_image$value = image.value) !== null && _image$value !== void 0 && _image$value.length);
      const showVideo = canInsertVideo && !!((_video$value = video.value) !== null && _video$value !== void 0 && _video$value.length);
      const showAudio = canInsertAudio && !!((_audio$value = audio.value) !== null && _audio$value !== void 0 && _audio$value.length);
      setCategories(MEDIA_CATEGORIES.filter(_ref => {
        let {
          mediaType
        } = _ref;
        return mediaType === 'image' && showImage || mediaType === 'video' && showVideo || mediaType === 'audio' && showAudio;
      }));
    })();
  }, [canInsertImage, canInsertVideo, canInsertAudio, fetchMedia]);
  return categories;
}
//# sourceMappingURL=hooks.js.map