import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useRef, useEffect } from '@wordpress/element';
import { useDispatch } from '@wordpress/data';
import { store as noticesStore } from '@wordpress/notices';
import { __, sprintf } from '@wordpress/i18n';
import { Popover } from '@wordpress/components';
import { useViewportMatch } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import Control from './control';
export default function Form(_ref) {
  let {
    title,
    isVisible,
    id,
    idBase,
    instance,
    isWide,
    onChangeInstance,
    onChangeHasPreview
  } = _ref;
  const ref = useRef();
  const isMediumLargeViewport = useViewportMatch('small'); // We only want to remount the control when the instance changes
  // *externally*. For example, if the user performs an undo. To do this, we
  // keep track of changes made to instance by the control itself and then
  // ignore those.

  const outgoingInstances = useRef(new Set());
  const incomingInstances = useRef(new Set());
  const {
    createNotice
  } = useDispatch(noticesStore);
  useEffect(() => {
    if (incomingInstances.current.has(instance)) {
      incomingInstances.current.delete(instance);
      return;
    }

    const control = new Control({
      id,
      idBase,
      instance,

      onChangeInstance(nextInstance) {
        outgoingInstances.current.add(instance);
        incomingInstances.current.add(nextInstance);
        onChangeInstance(nextInstance);
      },

      onChangeHasPreview,

      onError(error) {
        window.console.error(error);
        createNotice('error', sprintf(
        /* translators: %s: the name of the affected block. */
        __('The "%s" block was affected by errors and may not function properly. Check the developer tools for more details.'), idBase || id));
      }

    });
    ref.current.appendChild(control.element);
    return () => {
      if (outgoingInstances.current.has(instance)) {
        outgoingInstances.current.delete(instance);
        return;
      }

      control.destroy();
    };
  }, [id, idBase, instance, onChangeInstance, onChangeHasPreview, isMediumLargeViewport]);

  if (isWide && isMediumLargeViewport) {
    return createElement("div", {
      className: classnames({
        'wp-block-legacy-widget__container': isVisible
      })
    }, isVisible && createElement("h3", {
      className: "wp-block-legacy-widget__edit-form-title"
    }, title), createElement(Popover, {
      focusOnMount: false,
      placement: "right",
      offset: 32,
      resize: false,
      flip: false,
      shift: true
    }, createElement("div", {
      ref: ref,
      className: "wp-block-legacy-widget__edit-form",
      hidden: !isVisible
    })));
  }

  return createElement("div", {
    ref: ref,
    className: "wp-block-legacy-widget__edit-form",
    hidden: !isVisible
  }, createElement("h3", {
    className: "wp-block-legacy-widget__edit-form-title"
  }, title));
}
//# sourceMappingURL=form.js.map