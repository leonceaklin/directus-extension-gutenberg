import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { NoticeList } from '@wordpress/components';
import { withSelect, withDispatch } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { store as noticesStore } from '@wordpress/notices';
/**
 * Internal dependencies
 */

import TemplateValidationNotice from '../template-validation-notice';
export function EditorNotices(_ref) {
  let {
    notices,
    onRemove
  } = _ref;
  const dismissibleNotices = notices.filter(_ref2 => {
    let {
      isDismissible,
      type
    } = _ref2;
    return isDismissible && type === 'default';
  });
  const nonDismissibleNotices = notices.filter(_ref3 => {
    let {
      isDismissible,
      type
    } = _ref3;
    return !isDismissible && type === 'default';
  });
  return createElement(Fragment, null, createElement(NoticeList, {
    notices: nonDismissibleNotices,
    className: "components-editor-notices__pinned"
  }), createElement(NoticeList, {
    notices: dismissibleNotices,
    className: "components-editor-notices__dismissible",
    onRemove: onRemove
  }, createElement(TemplateValidationNotice, null)));
}
export default compose([withSelect(select => ({
  notices: select(noticesStore).getNotices()
})), withDispatch(dispatch => ({
  onRemove: dispatch(noticesStore).removeNotice
}))])(EditorNotices);
//# sourceMappingURL=index.js.map