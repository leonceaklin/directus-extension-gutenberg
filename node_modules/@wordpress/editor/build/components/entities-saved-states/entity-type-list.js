"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EntityTypeList;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _coreData = require("@wordpress/core-data");

var _entityRecordItem = _interopRequireDefault(require("./entity-record-item"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function getEntityDescription(entity, count) {
  switch (entity) {
    case 'site':
      return 1 === count ? (0, _i18n.__)('This change will affect your whole site.') : (0, _i18n.__)('These changes will affect your whole site.');

    case 'wp_template':
      return (0, _i18n.__)('This change will affect pages and posts that use this template.');

    case 'page':
    case 'post':
      return (0, _i18n.__)('The following content has been modified.');
  }
}

function EntityTypeList(_ref) {
  let {
    list,
    unselectedEntities,
    setUnselectedEntities,
    closePanel
  } = _ref;
  const count = list.length;
  const firstRecord = list[0];
  const entityConfig = (0, _data.useSelect)(select => select(_coreData.store).getEntityConfig(firstRecord.kind, firstRecord.name), [firstRecord.kind, firstRecord.name]);
  const {
    name
  } = firstRecord;
  let entityLabel = entityConfig.label;

  if (name === 'wp_template_part') {
    entityLabel = 1 === count ? (0, _i18n.__)('Template Part') : (0, _i18n.__)('Template Parts');
  } // Set description based on type of entity.


  const description = getEntityDescription(name, count);
  return (0, _element.createElement)(_components.PanelBody, {
    title: entityLabel,
    initialOpen: true
  }, description && (0, _element.createElement)(_components.PanelRow, null, description), list.map(record => {
    return (0, _element.createElement)(_entityRecordItem.default, {
      key: record.key || record.property,
      record: record,
      checked: !unselectedEntities.some(elt => elt.kind === record.kind && elt.name === record.name && elt.key === record.key && elt.property === record.property),
      onChange: value => setUnselectedEntities(record, value),
      closePanel: closePanel
    });
  }));
}
//# sourceMappingURL=entity-type-list.js.map