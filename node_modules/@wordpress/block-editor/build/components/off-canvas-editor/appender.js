"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Appender = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _data = require("@wordpress/data");

var _store = require("../../store");

var _inserter = _interopRequireDefault(require("../inserter"));

var _linkUi = require("./link-ui");

var _updateAttributes = require("./update-attributes");

var _useInsertedBlock = require("./use-inserted-block");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const BLOCKS_WITH_LINK_UI_SUPPORT = ['core/navigation-link', 'core/navigation-submenu'];
const Appender = (0, _element.forwardRef)((props, ref) => {
  const [insertedBlockClientId, setInsertedBlockClientId] = (0, _element.useState)();
  const {
    hideInserter,
    clientId
  } = (0, _data.useSelect)(select => {
    const {
      getTemplateLock,
      __unstableGetEditorMode,
      getSelectedBlockClientId
    } = select(_store.store);

    const _clientId = getSelectedBlockClientId();

    return {
      clientId: getSelectedBlockClientId(),
      hideInserter: !!getTemplateLock(_clientId) || __unstableGetEditorMode() === 'zoom-out'
    };
  }, []);
  const {
    insertedBlockAttributes,
    insertedBlockName,
    setInsertedBlockAttributes
  } = (0, _useInsertedBlock.useInsertedBlock)(insertedBlockClientId);

  const maybeSetInsertedBlockOnInsertion = _insertedBlock => {
    if (!(_insertedBlock !== null && _insertedBlock !== void 0 && _insertedBlock.clientId)) {
      return;
    }

    setInsertedBlockClientId(_insertedBlock === null || _insertedBlock === void 0 ? void 0 : _insertedBlock.clientId);
  };

  let maybeLinkUI;

  if (insertedBlockClientId && BLOCKS_WITH_LINK_UI_SUPPORT !== null && BLOCKS_WITH_LINK_UI_SUPPORT !== void 0 && BLOCKS_WITH_LINK_UI_SUPPORT.includes(insertedBlockName)) {
    maybeLinkUI = (0, _element.createElement)(_linkUi.LinkUI, {
      clientId: insertedBlockClientId,
      link: insertedBlockAttributes,
      onClose: () => setInsertedBlockClientId(null),
      hasCreateSuggestion: false,
      onChange: updatedValue => {
        (0, _updateAttributes.updateAttributes)(updatedValue, setInsertedBlockAttributes, insertedBlockAttributes);
        setInsertedBlockClientId(null);
      }
    });
  }

  if (hideInserter) {
    return null;
  }

  return (0, _element.createElement)("div", {
    className: "offcanvas-editor__appender"
  }, maybeLinkUI, (0, _element.createElement)(_inserter.default, (0, _extends2.default)({
    ref: ref,
    rootClientId: clientId,
    position: "bottom right",
    isAppender: true,
    selectBlockOnInsert: false,
    onSelectOrClose: maybeSetInsertedBlockOnInsertion,
    __experimentalIsQuick: true
  }, props)));
});
exports.Appender = Appender;
//# sourceMappingURL=appender.js.map