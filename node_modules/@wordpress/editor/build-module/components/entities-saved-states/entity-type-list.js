import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
import { PanelBody, PanelRow } from '@wordpress/components';
import { store as coreStore } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import EntityRecordItem from './entity-record-item';

function getEntityDescription(entity, count) {
  switch (entity) {
    case 'site':
      return 1 === count ? __('This change will affect your whole site.') : __('These changes will affect your whole site.');

    case 'wp_template':
      return __('This change will affect pages and posts that use this template.');

    case 'page':
    case 'post':
      return __('The following content has been modified.');
  }
}

export default function EntityTypeList(_ref) {
  let {
    list,
    unselectedEntities,
    setUnselectedEntities,
    closePanel
  } = _ref;
  const count = list.length;
  const firstRecord = list[0];
  const entityConfig = useSelect(select => select(coreStore).getEntityConfig(firstRecord.kind, firstRecord.name), [firstRecord.kind, firstRecord.name]);
  const {
    name
  } = firstRecord;
  let entityLabel = entityConfig.label;

  if (name === 'wp_template_part') {
    entityLabel = 1 === count ? __('Template Part') : __('Template Parts');
  } // Set description based on type of entity.


  const description = getEntityDescription(name, count);
  return createElement(PanelBody, {
    title: entityLabel,
    initialOpen: true
  }, description && createElement(PanelRow, null, description), list.map(record => {
    return createElement(EntityRecordItem, {
      key: record.key || record.property,
      record: record,
      checked: !unselectedEntities.some(elt => elt.kind === record.kind && elt.name === record.name && elt.key === record.key && elt.property === record.property),
      onChange: value => setUnselectedEntities(record, value),
      closePanel: closePanel
    });
  }));
}
//# sourceMappingURL=entity-type-list.js.map