import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __, sprintf } from '@wordpress/i18n';
import { PanelRow, Dropdown, Button } from '@wordpress/components';
import { useState, useMemo } from '@wordpress/element';
import { PostSchedule as PostScheduleForm, PostScheduleCheck, usePostScheduleLabel } from '@wordpress/editor';
export default function PostSchedule() {
  // Use internal state instead of a ref to make sure that the component
  // re-renders when the popover's anchor updates.
  const [popoverAnchor, setPopoverAnchor] = useState(null); // Memoize popoverProps to avoid returning a new object every time.

  const popoverProps = useMemo(() => ({
    anchor: popoverAnchor
  }), [popoverAnchor]);
  return createElement(PostScheduleCheck, null, createElement(PanelRow, {
    className: "edit-post-post-schedule",
    ref: setPopoverAnchor
  }, createElement("span", null, __('Publish')), createElement(Dropdown, {
    popoverProps: popoverProps,
    position: "bottom left",
    contentClassName: "edit-post-post-schedule__dialog",
    focusOnMount: true,
    renderToggle: _ref => {
      let {
        isOpen,
        onToggle
      } = _ref;
      return createElement(PostScheduleToggle, {
        isOpen: isOpen,
        onClick: onToggle
      });
    },
    renderContent: _ref2 => {
      let {
        onClose
      } = _ref2;
      return createElement(PostScheduleForm, {
        onClose: onClose
      });
    }
  })));
}

function PostScheduleToggle(_ref3) {
  let {
    isOpen,
    onClick
  } = _ref3;
  const label = usePostScheduleLabel();
  const fullLabel = usePostScheduleLabel({
    full: true
  });
  return createElement(Button, {
    className: "edit-post-post-schedule__toggle",
    variant: "tertiary",
    label: fullLabel,
    showTooltip: true,
    "aria-expanded": isOpen // translators: %s: Current post date.
    ,
    "aria-label": sprintf(__('Change date: %s'), label),
    onClick: onClick
  }, label);
}
//# sourceMappingURL=index.js.map